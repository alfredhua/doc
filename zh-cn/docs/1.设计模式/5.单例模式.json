{
  "filename": "5.单例模式.md",
  "__html": "<ul>\n<li>掌握单例模式的应用场景。</li>\n<li>掌握IDEA环境下的多线程调试方式。</li>\n<li>掌握保证线程安全的单例模式策略。</li>\n<li>掌握反射暴力攻击单例解决方案及原理分析。</li>\n<li>序列化破坏单例的原理及解决方案。</li>\n<li>掌握常见的单例模式写法。</li>\n<li>掌握原型模式的应用场景及常用写法。</li>\n</ul>\n<p>任何情况下只有一个实例，提供全局一个访问点。</p>\n<p>ServletContext、ServletConfig、BeanFactory、ApplicationContext、DBPool</p>\n<p>饿汉式单例：</p>\n<blockquote>\n<p>在初始话的时候直接new出来了，不需要在调用的时候去new，这样就避免了线程安全的问题。</p>\n</blockquote>\n<p>优点：1.线程绝对安全。2.执行效率高。在类加载的时候就初始化了。</p>\n<p>缺点：1.浪费类型空间，占用内存。占着空间，浪费资源。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hungry</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">Hungry</span><span class=\"hljs-params\">()</span></span>{}\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Hungry hungry = <span class=\"hljs-keyword\">new</span> Hungry();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Hungry <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-keyword\">return</span>  hungry;\n    }\n\n}\n</code></pre>\n<p>懒汉式：\n在需要的时候才会去创建。</p>\n<pre><code>优点：1.占用空间小\n\n缺点：1.需要自己解决线程安全问题。\n</code></pre>\n<p>特点：在外部类被调用的时候内部类才会被加载内部类一定是要在方法调用之前初始化巧妙地避免了线程安全问题\n这种形式兼顾饿汉式的内存浪费，也兼顾synchronized性能问题，完美地屏蔽了这两个缺点。\n史上最牛B的单例模式的实现方式</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LazyOne</span></span>{\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> LazyOne lazyOne=<span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">LazyOne</span><span class=\"hljs-params\">()</span></span>{}\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> LazyOne <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//线程不安全</span>\n        <span class=\"hljs-keyword\">if</span>(lazyOne==<span class=\"hljs-keyword\">null</span>){\n            lazyOne=<span class=\"hljs-keyword\">new</span> LazyOne();\n        }\n        <span class=\"hljs-keyword\">return</span> lazyOne;\n    }\n}\n\n\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LazyTwo</span></span>{\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> LazyTwo lazyTwo=<span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">LazyTwo</span><span class=\"hljs-params\">()</span></span>{}\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> LazyTwo <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//线程安全，执行效率低</span>\n        <span class=\"hljs-keyword\">if</span>(lazyTwo==<span class=\"hljs-keyword\">null</span>){\n            lazyTwo=<span class=\"hljs-keyword\">new</span> LazyTwo;\n        }\n        <span class=\"hljs-keyword\">return</span> lazyTwo;\n    }\n}\n\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LazyThree</span></span>{\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> LazyThree lazythree=<span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">LazyThree</span><span class=\"hljs-params\">()</span></span>{}\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  LazyThree <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//线程安全，执行效率可以</span>\n       <span class=\"hljs-keyword\">if</span>(lazythree==<span class=\"hljs-keyword\">null</span>){\n            <span class=\"hljs-keyword\">synchronized</span>(LazyThree<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>{\n                <span class=\"hljs-keyword\">if</span>(lazythree==<span class=\"hljs-keyword\">null</span>){\n                  lazythree=<span class=\"hljs-keyword\">new</span> LazyThree();\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> lazythree;\n    } \n}\n\n\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LazyFour</span></span>{\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> LazyFour lazyFour=<span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">LazyFour</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//防止反射入侵单例</span>\n        <span class=\"hljs-keyword\">if</span>(lazyFour!=<span class=\"hljs-keyword\">null</span>){\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RunTimeException(<span class=\"hljs-string\">\"单例被入侵\"</span>);\n        }\n        \n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  LazyTwo <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>{\n        lazyFour=LazyHandle.lazyFour;\n    } \n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LazyHandle</span></span>{\n        <span class=\"hljs-keyword\">static</span> LazyFour lazyFour=<span class=\"hljs-keyword\">new</span> LazyFour();\n    }\n    \n}\n\n</code></pre>\n<p>注册试：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReginsterSingle</span> </span>{\n\n    <span class=\"hljs-comment\">//HashMap 变成ConcurrentHashmap就是线程安全的</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String,Object&gt; registerMap=<span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">ReginsterSingle</span><span class=\"hljs-params\">()</span></span>{}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ReginsterSingle <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">(String name)</span></span>{\n\n        <span class=\"hljs-keyword\">if</span>(name!=<span class=\"hljs-keyword\">null</span>){\n            name = ReginsterSingle<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>()</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (registerMap.get(name)==<span class=\"hljs-keyword\">null</span>){\n            registerMap.put(name, <span class=\"hljs-keyword\">new</span> ReginsterSingle());\n        }\n        <span class=\"hljs-keyword\">return</span> (ReginsterSingle)registerMap.get(name);\n    }\n\n}\n<span class=\"hljs-comment\">//枚举式</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> RegiterEnum {\n    INSTANCE,BLACK,WHITE;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>{}\n}\n\n</code></pre>\n<p>序列化和反序列化：</p>\n<ol>\n<li>把对象转换为字节序列的过程称为对象的序列化。</li>\n<li>把字节序列恢复为对象的过程称为对象的反序列化。</li>\n</ol>\n<p>对象的序列化主要有两种用途：</p>\n<ol>\n<li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中。</li>\n<li>在网络上传送对象的字节序列;</li>\n</ol>\n<p>实现readResolve方法可以防止反序列化。</p>\n<pre><code>   public  final static Seriable INSTANCE = new Seriable();\n    private Seriable(){}\n\n    public static  Seriable getInstance(){\n        return INSTANCE;\n    }\n\n    private  Object readResolve(){\n        return  INSTANCE;\n    }\n</code></pre>\n",
  "link": "/zh-cn/docs/1.设计模式/5.单例模式.html",
  "meta": {
    "title": "单例模式-码农阿华",
    "keywords": "单例模式，设计模式",
    "description": "单例模式。"
  }
}