{
  "filename": "3.thread.md",
  "__html": "<h2 id=\"thread\">thread <a class=\"header-anchor\" href=\"#thread\">#</a></h2>\n<h3 id=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明 <a class=\"header-anchor\" href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>id</em></td>\n<td>线程id</td>\n</tr>\n<tr>\n<td>[n:]</td>\n<td>指定最忙的前N个线程并打印堆栈</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>找出当前阻塞其他线程的线程</td>\n</tr>\n<tr>\n<td>[i <code>&lt;value&gt;</code>]</td>\n<td>指定cpu使用率统计的采样间隔，单位为毫秒，默认值为200</td>\n</tr>\n<tr>\n<td>[--all]</td>\n<td>显示所有匹配的线程</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E7%9A%84%EF%BC%9F\">cpu使用率是如何统计出来的？ <a class=\"header-anchor\" href=\"#cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E7%9A%84%EF%BC%9F\">#</a></h2>\n<p>这里的cpu使用率与linux 命令<code>top -H -p &lt;pid&gt;</code> 的线程<code>%CPU</code>类似，一段采样间隔时间内，当前JVM里各个线程的增量cpu时间与采样间隔时间的比例。</p>\n<h3 id=\"%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%B4%E6%98%8E%EF%BC%9A\">工作原理说明： <a class=\"header-anchor\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%B4%E6%98%8E%EF%BC%9A\">#</a></h3>\n<ul>\n<li>首先第一次采样，获取所有线程的CPU时间(调用的是<code>java.lang.management.ThreadMXBean#getThreadCpuTime()</code>及<code>sun.management.HotspotThreadMBean.getInternalThreadCpuTimes()</code>接口)</li>\n<li>然后睡眠等待一个间隔时间（默认为200ms，可以通过<code>-i</code>指定间隔时间）</li>\n<li>再次第二次采样，获取所有线程的CPU时间，对比两次采样数据，计算出每个线程的增量CPU时间</li>\n<li>线程CPU使用率 = 线程增量CPU时间 / 采样间隔时间 * 100%</li>\n</ul>\n<blockquote>\n<p>注意： 这个统计也会产生一定的开销（JDK这个接口本身开销比较大），因此会看到as的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如5000毫秒。</p>\n</blockquote>\n<blockquote>\n<p>另外一种查看Java进程的线程cpu使用率方法：可以使用<a href=\"https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#-show-busy-java-threads\">show-busy-java-threads</a>这个脚本</p>\n</blockquote>\n<ul>\n<li>没有线程ID，包含<code>[Internal]</code>表示为JVM内部线程，参考<a href=\"https://arthas.aliyun.com/doc/dashboard.html\">dashboard</a>命令的介绍。</li>\n<li><code>cpuUsage</code>为采样间隔时间内线程的CPU使用率，与<a href=\"https://arthas.aliyun.com/doc/dashboard.html\">dashboard</a>命令的数据一致。</li>\n<li><code>deltaTime</code>为采样间隔时间内线程的增量CPU时间，小于1ms时被取整显示为0ms。</li>\n<li><code>time</code> 线程运行总CPU时间。</li>\n</ul>\n<p>注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。</p>\n<h2 id=\"demo\">demo <a class=\"header-anchor\" href=\"#demo\">#</a></h2>\n<ul>\n<li><code>thread -i 1000</code> : 统计最近1000ms内的线程CPU时间。</li>\n<li><code>thread -n 3 -i 1000</code> : 列出1000ms内最忙的3个线程栈</li>\n<li>thread –state ，查看指定状态的线程</li>\n</ul>\n",
  "link": "/zh-cn/docs/10.工具/arthas/3.thread.html",
  "meta": {}
}