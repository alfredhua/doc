{
  "filename": "4.垃圾回收.md",
  "__html": "<h2 id=\"%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%9E%83%E5%9C%BE%3F\">如何确定一个对象是垃圾? <a class=\"header-anchor\" href=\"#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%9E%83%E5%9C%BE%3F\">#</a></h2>\n<p>1、引用计数法</p>\n<pre><code>对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任 何指针对其引用，它就是垃圾。\n弊端 :如果AB相互持有引用，导致永远不能被回收。\n</code></pre>\n<p>2、可达性分析</p>\n<pre><code>通过GC Root的对象，开始向下寻找，看某个对象是否可达\n</code></pre>\n<p>能作为GC Root:类加载器、Thread、虚拟机栈的本地变量表、static成员、常量引用、本地方法栈的变量等。</p>\n<h1 id=\"%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95\">垃圾收集算法 <a class=\"header-anchor\" href=\"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95\">#</a></h1>\n<h2 id=\"1%E3%80%81%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4(mark-sweep)\">1、标记-清除(Mark-Sweep) <a class=\"header-anchor\" href=\"#1%E3%80%81%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4(mark-sweep)\">#</a></h2>\n<p>标记：\n找出内存中需要回收的对象，并且把它们标记出来</p>\n<p>此时堆中所有的对象都会被扫描一遍，从而才能确定需要回收的对象，比较耗时\n<img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/9fc245b9461b412ead1be84f3beb769c.png\" alt=\"image\"></p>\n<p>清除：\n清除掉被标记需要回收的对象，释放出对应的内存空间</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/768f8e4284984c2fbb17a609fbc63fc3.png\" alt=\"image\"></p>\n<p>缺点：</p>\n<ol>\n<li>标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程 序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n<li>标记和清除两个过程都比较耗时，效率不高</li>\n</ol>\n<h2 id=\"%E5%A4%8D%E5%88%B6(copying)\">复制(Copying) <a class=\"header-anchor\" href=\"#%E5%A4%8D%E5%88%B6(copying)\">#</a></h2>\n<p>将内存划分为两块相等的区域，每次只使用其中一块，如下图所示:\n<img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/a07c2d6fd5c749099a0f5cb3a4ffa64f.png\" alt=\"image\"></p>\n<p>当其中一块内存使用完了，就将还存活的对象复制到另外一块上面，然后把已经使用过的内存空间一次 清除掉。</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/c9bed98ae40846709486e04342addc49.png\" alt=\"image\"></p>\n<p>缺点: 空间利用率降低。</p>\n<h2 id=\"3%E3%80%81%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86(mark-compact)\">3、标记-整理(Mark-Compact) <a class=\"header-anchor\" href=\"#3%E3%80%81%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86(mark-compact)\">#</a></h2>\n<p>标记过程仍然与&quot;标记-清除&quot;算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活 的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/772ac47723f644f7b17c3656566b0f72.png\" alt=\"image\"></p>\n<p>让所有存活的对象都向一端移动，清理掉边界意外的内存。</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/314f53332e354da8aec78ff2e66fdd24.png\" alt=\"image\"></p>\n<h2 id=\"%E6%97%A2%E7%84%B6%E4%B8%8A%E9%9D%A2%E4%BB%8B%E7%BB%8D%E4%BA%863%E4%B8%AD%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95%EF%BC%8C%E9%82%A3%E4%B9%88%E5%9C%A8%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E5%88%B0%E5%BA%95%E7%94%A8%E5%93%AA%E4%B8%80%E4%B8%AA%E5%91%A2%3F\">既然上面介绍了3中垃圾收集算法，那么在堆内存中到底用哪一个呢? <a class=\"header-anchor\" href=\"#%E6%97%A2%E7%84%B6%E4%B8%8A%E9%9D%A2%E4%BB%8B%E7%BB%8D%E4%BA%863%E4%B8%AD%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95%EF%BC%8C%E9%82%A3%E4%B9%88%E5%9C%A8%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E5%88%B0%E5%BA%95%E7%94%A8%E5%93%AA%E4%B8%80%E4%B8%AA%E5%91%A2%3F\">#</a></h2>\n<ul>\n<li>Young区:复制算法(对象在被分配之后，可能生命周期比较短，Young区复制效率比较高)</li>\n<li>Old区:标记清除或标记整理(Old区对象存活时间比较长，复制来复制去没必要，不如做个标记再清理)</li>\n</ul>\n",
  "link": "/zh-cn/docs/2.java/jvm/4.垃圾回收.html",
  "meta": {
    "title": "垃圾回收-码农阿华",
    "keywords": "垃圾收集算法，标记-清除，复制，标记-整理，JVM",
    "description": "如何确定一个对象是垃圾？垃圾收集算法，标记-清除，复制，标记-整理，JVM，Young区:复制算法，Old区:标记清除或标记整理"
  }
}