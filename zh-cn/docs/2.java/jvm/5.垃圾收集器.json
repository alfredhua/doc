{
  "filename": "5.垃圾收集器.md",
  "__html": "<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/5b28f360bbd241cd8a26ff674f9f3ccd.png\" alt=\"image\"></p>\n<h2 id=\"serial%E6%94%B6%E9%9B%86%E5%99%A8\">Serial收集器 <a class=\"header-anchor\" href=\"#serial%E6%94%B6%E9%9B%86%E5%99%A8\">#</a></h2>\n<p>Serial收集器是最基本、发展历史最悠久的收集器，曾经(在JDK1.3.1之前)是虚拟机新生代收集的唯一选择。</p>\n<p>它是一种单线程收集器，不仅仅意味着它只会使用一个CPU或者一条收集线程去完成垃圾收集工作，更重要的是其在进行垃圾收集的时候需要暂停其他线程。</p>\n<ul>\n<li>参数：-XX:+UseSerialGC</li>\n<li>优点:简单高效，拥有很高的单线程收集效率</li>\n<li>缺点:收集过程需要暂停所有线程 算法:复制算法</li>\n<li>适用范围:新生代 应用:Client模式下的默认新生代收集器</li>\n</ul>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/f9f71293d181412aa3189a08ad48ef1e.png\" alt=\"image\"></p>\n<h2 id=\"serial-old%E6%94%B6%E9%9B%86%E5%99%A8\">Serial Old收集器 <a class=\"header-anchor\" href=\"#serial-old%E6%94%B6%E9%9B%86%E5%99%A8\">#</a></h2>\n<p>Serial Old收集器是Serial收集器的老年代版本，也是一个单线程收集器，不同的是采用&quot;标记-整理算 法&quot;，运行过程和Serial收集器一样。</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/edafe3b45e1e4d42a6bad9a7d716de74.png\" alt=\"image\"></p>\n<h2 id=\"parnew%E6%94%B6%E9%9B%86%E5%99%A8\">ParNew收集器 <a class=\"header-anchor\" href=\"#parnew%E6%94%B6%E9%9B%86%E5%99%A8\">#</a></h2>\n<p>可以把这个收集器理解为Serial收集器的多线程版本。</p>\n<ul>\n<li>\n<p>参数：</p>\n<ul>\n<li>&quot;-XX:+UseConcMarkSweepGC&quot;：指定使用CMS后，会默认使用ParNew作为新生代收集器；</li>\n<li>&quot;-XX:+UseParNewGC&quot;：强制指定使用ParNew。</li>\n<li>-&quot;-XX:ParallelGCThreads&quot;：指定垃圾收集的线程数量，ParNew默认开启的收集线程与CPU的数量相同；</li>\n</ul>\n</li>\n<li>\n<p>优点:在多CPU时，比Serial效率高。</p>\n</li>\n<li>\n<p>缺点:收集过程暂停所有应用程序线程，单CPU时比Serial效率差。</p>\n</li>\n<li>\n<p>算法:复制算法</p>\n</li>\n<li>\n<p>适用范围:新生代</p>\n</li>\n<li>\n<p>应用:运行在Server模式下的虚拟机中首选的新生代收集器</p>\n</li>\n</ul>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/8e861169a2c64b25bd6b022d0f62a5fe.png\" alt=\"image\"></p>\n<h2 id=\"parallel-scavenge%E6%94%B6%E9%9B%86%E5%99%A8\">Parallel Scavenge收集器 <a class=\"header-anchor\" href=\"#parallel-scavenge%E6%94%B6%E9%9B%86%E5%99%A8\">#</a></h2>\n<p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器，看上去和ParNew一样，但是Parallel Scanvenge更关注 系统的吞吐量。</p>\n<p>使用复制算法的并行多线程收集器。而且是并行的多线程收集器.java1.8默认的收集器</p>\n<p>吞吐量=运行用户代码的时间/(运行用户代码的时间+垃圾收集时间)\n比如虚拟机总共运行了100分钟，垃圾收集时间用了1分钟，吞吐量=(100-1)/100=99%。</p>\n<p>若吞吐量越大，意味着垃圾收集的时间越短，则用户代码可以充分利用CPU资源，尽快完成程序 的运算任务。</p>\n<ul>\n<li>\n<p>参数：\n-XX:+UseParallelGC</p>\n<p>-XX:MaxGCPauseMillis控制最大的垃圾收集停顿时间</p>\n<p>-XX:GCTimeRatio直接设置吞吐量的大小。</p>\n<p>-XX:UseAdaptiveSizePolicy：Parallel收集器还提供了自适应的调节策略，即JVM会根据实际运行情况动态调整新生代大小、新生代和s区比例、晋升老年代对象大小等细节参数。</p>\n</li>\n</ul>\n<h2 id=\"parallel-old%E6%94%B6%E9%9B%86%E5%99%A8\">Parallel Old收集器 <a class=\"header-anchor\" href=\"#parallel-old%E6%94%B6%E9%9B%86%E5%99%A8\">#</a></h2>\n<p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程和&quot;标记-整理算法&quot;进行垃圾回收。</p>\n<p>吞吐量优先</p>\n<p>参数：-XX:+UseParallelOldGC</p>\n<h2 id=\"cms%E6%94%B6%E9%9B%86%E5%99%A8\">CMS收集器 <a class=\"header-anchor\" href=\"#cms%E6%94%B6%E9%9B%86%E5%99%A8\">#</a></h2>\n<p>CMS(Concurrent Mark Sweep)收集器是一种以获取 最短回收停顿时间 为目标的收集器。\n采用的是&quot;标记-清除算法&quot;,整个过程分为4步</p>\n<ol>\n<li>初始标记 CMS initial mark -&gt;速度很快(标记GC Roots能关 联到的对象 Stop The World)</li>\n<li>并发标记 CMS concurrent mark(进行GC Roots Tracing)</li>\n<li>重新标记 CMS remark(修改并发标记因用户程序变动的内容 Stop The World)</li>\n<li>并发清除 CMS concurrent sweep</li>\n</ol>\n<p>由于整个过程中，并发标记和并发清除，收集器线程可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行的。</p>\n<ul>\n<li>优点:并发收集、低停顿</li>\n<li>缺点:产生大量空间碎片、并发阶段会降低吞吐量</li>\n</ul>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/4ae6ffb0369f41d0a18ba33008b8f2fc.png\" alt=\"image\">\n触发条件：</p>\n<ol>\n<li>如果没有设置-XX:+UseCMSInitiatingOccupancyOnly，虚拟机会根据收集的数据决定是否触发（建议带上这个参数）。</li>\n<li>老年代使用率达到阈值 CMSInitiatingOccupancyFraction，默认92%，前提是配置了第一个参数。</li>\n<li>永久代的使用率达到阈值 CMSInitiatingPermOccupancyFraction，默认92%，前提是开启 CMSClassUnloadingEnabled并且配置了第一个参数。</li>\n<li>新生代的晋升担保失败。</li>\n</ol>\n<p>参数：</p>\n<ul>\n<li>-XX:+UseConcMarkSweepGC 激活CMS收集器</li>\n<li>-XX:ConcGCThreads 设置CMS线程的数量</li>\n<li>-XX:+UseCMSInitiatingOccupancyOnly：如果不指定, 只是用设定的回收阈值CMSInitiatingOccupancyFraction,则JVM仅在第一次使用设定值,后续则自动调整会导致上面的那个参数不起作用。</li>\n<li>-XX:CMSInitiatingOccupancyFraction=70：是指设定CMS在对内存占用率达到70%的时候开始GC。设置触发CMS老年代回收的内存使用率占比，默认92%。前提是配置了UseCMSInitiatingOccupancyOnly。</li>\n<li>-XX:+CMSParallelRemarkEnabled：并行运行最终标记阶段，加快最终标记的速度</li>\n<li>-XX:+UseCMSCompactAtFullCollection：每次触发CMS Full GC的时候都整理一次碎片</li>\n<li>-XX:CMSFullGCsBeforeCompaction=n：上一次CMS并发GC执行过后，到底还要再执行多少次full GC才会做压缩。默认是0，也就是在默认配置下每次CMS GC顶不住了而要转入full GC的时候都会做压缩。 如果把</li>\n<li>-XX:+CMSClassUnloadingEnabled：让CMS可以收集永久带，默认不会收集</li>\n<li>-XX:+CMSScavengeBeforeRemark：最终标记之前强制进行一个Minor GC</li>\n<li>-XX:+ExplicitGCInvokesConcurrent：当调用System.gc()的时候，执行并行gc，只有在CMS或者G1下该参数才有效</li>\n</ul>\n<h2 id=\"g1%E6%94%B6%E9%9B%86%E5%99%A8\">G1收集器 <a class=\"header-anchor\" href=\"#g1%E6%94%B6%E9%9B%86%E5%99%A8\">#</a></h2>\n<p>G1特点：</p>\n<ul>\n<li>并行与并发</li>\n<li>分代收集(仍然保留了分代的概念)</li>\n<li>空间整合(整体上属于“标记-整理”算法，不会导致空间碎片) 可预测的停顿(比CMS更先进的地方在于能让使用者明确指定一个长度为M毫秒的时间片段内，消耗在垃圾收集 上的时间不得超过N毫秒)</li>\n</ul>\n<p>使用G1收集器时，Java堆的内存布局与就与其他收集器有很大差别，它将整个Java堆划分为多个 大小相等的独立区域(Region)，虽然还保留有新生代和老年代的概念，但新生代和老年代不再 是物理隔离的了，它们都是一部分Region(不需要连续)的集合。</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/a5c101afd788485998c7a8ead20adb3f.png\" alt=\"image\"></p>\n<p>G1的内存模型:</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/fe0016ea68af43778e24dea81b6be4da\" alt=\"image\"></p>\n<h2 id=\"%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%EF%BC%9F\">如何选择合适的垃圾收集器？ <a class=\"header-anchor\" href=\"#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%EF%BC%9F\">#</a></h2>\n<p>官网 :<a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/collectors.html#sthref28\">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/collectors.html#sthref28</a></p>\n<p>优先调整堆的大小让服务器自己来选择</p>\n<ul>\n<li>如果内存小于100M，使用串行收集器</li>\n<li>如果是单核，并且没有停顿时间要求，使用串行或JVM自己选</li>\n<li>如果允许停顿时间超过1秒，选择并行或JVM自己选</li>\n<li>如果响应时间最重要，并且不能超过1秒，使用并发收集器 对于G1收集</li>\n</ul>\n<p>JDK 7开始使用，JDK 8非常成熟，JDK 9默认的垃圾收集器，适用于新老生代。</p>\n<p>判断是否需要使用G1收集器?</p>\n<ol>\n<li>50%以上的堆被存活对象占用</li>\n<li>对象分配和晋升的速度变化非常大</li>\n<li>垃圾回收时间比较长</li>\n</ol>\n",
  "link": "/zh-cn/docs/2.java/jvm/5.垃圾收集器.html",
  "meta": {}
}