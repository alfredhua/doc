{
  "filename": "2.integer.md",
  "__html": "<p>将 Integer对象i和j进行互换：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IntegetTest</span> </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n      Integer i=<span class=\"hljs-number\">1</span>,j=<span class=\"hljs-number\">2</span>;\n      swap(i,j);\n      System.out.println(<span class=\"hljs-string\">\"i=\"</span>+i+<span class=\"hljs-string\">\",j=\"</span>+j);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(Integer i,Integer j)</span></span>{\n    Integer tmp=j;\n    j=i;\n    i=tmp;\n  }\n}\n\n</code></pre>\n<p>以上是正常互换情形，但是输出结果却是：i=1,j=2\n未发生互换。</p>\n<p>解读：\n我们输入，Integer i=1；实际上的操作是 Integer i=Integer.value(1);\n此时我们可以看到Integer.value方法如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Integer <span class=\"hljs-title\">valueOf</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)\n        <span class=\"hljs-keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Integer(i);\n}\n\n</code></pre>\n<p>当i&gt;= IntegerCache.low即（-128） &amp;&amp; i &lt;= IntegerCache.high（127）\n是从 IntegerCache.cache对应的下标获取值。即 -128到127存放在cache下标为：0到256的位置上。\n所以，我们在进行</p>\n<pre><code class=\"language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(Integer i,Integer j)</span></span>{\n    Integer tmp=j;\n    j=i;\n    i=tmp;\n  }\n</code></pre>\n<p>操作时，实际上是获取的Integer.cache中的对应的下标值，所以并没有发生变化。\n由此可以发现：\n在-128到127之间，我们进行互换操作时，不受影响，但是其他的值会发生变化。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(Integer i,Integer j)</span> <span class=\"hljs-keyword\">throws</span> NoSuchFieldException, IllegalAccessException </span>{\n  Field value = i.getClass().getDeclaredField(<span class=\"hljs-string\">\"value\"</span>);\n  value.setAccessible(<span class=\"hljs-keyword\">true</span>);\n  <span class=\"hljs-keyword\">int</span> tmp=i;\n  value.set(i,j);\n  System.out.println(tmp);\n  value.set(j, <span class=\"hljs-keyword\">new</span> Integer(tmp));\n}\n\n\n</code></pre>\n<p>new Integer(tmp)的时候才会把int类型的值传递给Integer中的value属性。</p>\n<p>反射：\nvalue.setAccessible(true);\n会设置override属性为true</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAccessible0</span><span class=\"hljs-params\">(AccessibleObject obj, <span class=\"hljs-keyword\">boolean</span> flag)</span>\n    <span class=\"hljs-keyword\">throws</span> SecurityException\n</span>{\n    <span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">instanceof</span> Constructor &amp;&amp; flag == <span class=\"hljs-keyword\">true</span>) {\n        Constructor&lt;?&gt; c = (Constructor&lt;?&gt;)obj;\n        <span class=\"hljs-keyword\">if</span> (c.getDeclaringClass() == Class<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>) </span>{\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> SecurityException(<span class=\"hljs-string\">\"Cannot make a java.lang.Class\"</span> +\n                                        <span class=\"hljs-string\">\" constructor accessible\"</span>);\n        }\n    }\n    obj.override = flag;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">set</span><span class=\"hljs-params\">(Object obj, Object value)</span>\n    <span class=\"hljs-keyword\">throws</span> IllegalArgumentException, IllegalAccessException\n</span>{\n    <span class=\"hljs-keyword\">if</span> (!override) {\n        <span class=\"hljs-keyword\">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n            Class&lt;?&gt; caller = Reflection.getCallerClass();\n            checkAccess(caller, clazz, obj, modifiers);\n        }\n    }\n    getFieldAccessor(obj).set(obj, value);\n}\n\n</code></pre>\n<p>我们在调用Set方法时候可以看到会先判断override属性，如果是true的话才允许设置。</p>\n",
  "link": "/zh-cn/docs/2.java/基础/2.integer.html",
  "meta": {
    "title": "integer-码农阿华",
    "keywords": "integer，JAVA，基础",
    "description": "Integer对象，Integer"
  }
}