{
  "filename": "3.CountDownLatch.md",
  "__html": "<p>CountDownLatch是一个非常实用的多线程控制工具类。“Count Down”在英文中意为倒计数，Latch为门闩的意思。如果翻译成为倒计数门闩，我想大家都会觉得不知所云吧！因此，这里简单地称之为倒计数器。在这里，门闩的含义是：把门锁起来，不让里面的线程跑出来。因此，这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> java.util.concurrent.CountDownLatch;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CountDownLatchDemo2</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Thread</span> </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    CountDownLatch countDownLatch=<span class=\"hljs-keyword\">new</span> CountDownLatch(<span class=\"hljs-number\">100</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n      <span class=\"hljs-keyword\">new</span> CountDownLatchDemo2().start();\n      countDownLatch.countDown();\n    }\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      System.out.println(<span class=\"hljs-string\">\"---------子线程\"</span>+Thread.currentThread().getName()+<span class=\"hljs-string\">\"正在执行\"</span>);\n      Thread.sleep(<span class=\"hljs-number\">3000</span>);\n      System.out.println(<span class=\"hljs-string\">\"----over-------子线程\"</span>+Thread.currentThread().getName()+<span class=\"hljs-string\">\"执行完毕\"</span>);\n    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n</code></pre>\n<p>由此可知：\n主线程运行，一直等到CountLatch的所有线程都到达才继续往下执行。\ncountDownLatch.countDown();不断往下减少，一直为0时。表明所有执行完成。</p>\n<p>CountDownLatch运行示意图：</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/b043748c85ae48d199643aa0541bb43f.png\" alt=\"image\"></p>\n",
  "link": "/zh-cn/docs/2.java/并发/3.CountDownLatch.html",
  "meta": {}
}