{
  "filename": "4.CyclicBarrier.md",
  "__html": "<p>CyclicBarrier可以理解为循环栅栏。栅栏就是一种障碍物，比如，通常在私人宅邸的周围就可以围上一圈栅栏，阻止闲杂人等入内。这里当然就是用来阻止线程继续执行，要求线程在栅栏处等待。前面Cyclic意为循环，也就是说这个计数器可以反复使用。比如，假设我们将计数器设置为10，那么凑齐第一批10个线程后，计数器就会归零，然后接着凑齐下一批10个线程，这就是循环栅栏内在的含义。</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.CyclicBarrier;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CycliBarrierDemo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Thread</span></span>{\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"开始进行数据分析\"</span>);\n    }\n    <span class=\"hljs-comment\">//循环屏障</span>\n    <span class=\"hljs-comment\">//可以使得一组线程达到一个同步点之前阻塞.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        CyclicBarrier cyclicBarrier=<span class=\"hljs-keyword\">new</span> CyclicBarrier\n                (<span class=\"hljs-number\">3</span>,<span class=\"hljs-keyword\">new</span> CycliBarrierDemo());\n        <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> DataImportThread(cyclicBarrier,<span class=\"hljs-string\">\"file1\"</span>)).start();\n        <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> DataImportThread(cyclicBarrier,<span class=\"hljs-string\">\"file2\"</span>)).start();\n        <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> DataImportThread(cyclicBarrier,<span class=\"hljs-string\">\"file3\"</span>)).start();\n    }\n}\n\n\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.BrokenBarrierException;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.CyclicBarrier;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DataImportThread</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Thread</span></span>{\n\n    <span class=\"hljs-keyword\">private</span> CyclicBarrier cyclicBarrier;\n\n    <span class=\"hljs-keyword\">private</span> String path;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DataImportThread</span><span class=\"hljs-params\">(CyclicBarrier cyclicBarrier, String path)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.cyclicBarrier = cyclicBarrier;\n        <span class=\"hljs-keyword\">this</span>.path = path;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"开始导入：\"</span>+path+<span class=\"hljs-string\">\" 数据\"</span>);\n        <span class=\"hljs-comment\">//TODO</span>\n        <span class=\"hljs-keyword\">try</span> {\n            cyclicBarrier.await(); <span class=\"hljs-comment\">//阻塞 condition.await()</span>\n        } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (BrokenBarrierException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n</code></pre>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/ff7d89d3824944a4ac95f6a5a4e6585a.png\" alt=\"image\"></p>\n",
  "link": "/zh-cn/docs/2.java/并发/4.CyclicBarrier.html",
  "meta": {
    "title": "并发级别-码农阿华",
    "keywords": "并发基本概念，并发级别，CountDownLatch，CyclicBarrier，线程池，原子类同步和异步，并发和并行，临界区，阻塞（Blocking）和非阻塞（Non-Blocking），死锁（Deadlock）、饥饿（Starvation）和活锁（Livelock）",
    "description": "CyclicBarrier可以理解为循环栅栏。栅栏就是一种障碍物，比如，通常在私人宅邸的周围就可以围上一圈栅栏，阻止闲杂人等入内。这里当然就是用来阻止线程继续执行，要求线程在栅栏处等待。前面Cyclic意为循环，也就是说这个计数器可以反复使用。比如，假设我们将计数器设置为10，那么凑齐第一批10个线程后，计数器就会归零，然后接着凑齐下一批10个线程，这就是循环栅栏内在的含义。"
  }
}