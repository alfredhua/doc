{
  "filename": "1.Http.md",
  "__html": "<h1 id=\"http-%E7%AE%80%E4%BB%8B\">HTTP 简介 <a class=\"header-anchor\" href=\"#http-%E7%AE%80%E4%BB%8B\">#</a></h1>\n<p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。</p>\n<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>\n<h2 id=\"http-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">HTTP 工作原理 <a class=\"header-anchor\" href=\"#http-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">#</a></h2>\n<p>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p>\n<p>Web服务器有：Apache服务器，IIS服务器（Internet Information Services）等。</p>\n<p>Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n<p>HTTP默认端口号为80，但是你也可以改为8080或者其他端口。</p>\n<p><strong>HTTP三点注意事项：</strong></p>\n<ul>\n<li>HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</li>\n<li>HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>\n</ul>\n<p>以下图表展示了HTTP协议通信流程：</p>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/RkSoeq.png\" alt=\"image\"></p>\n<h1 id=\"http-%E6%B6%88%E6%81%AF%E7%BB%93%E6%9E%84\">HTTP 消息结构 <a class=\"header-anchor\" href=\"#http-%E6%B6%88%E6%81%AF%E7%BB%93%E6%9E%84\">#</a></h1>\n<p>HTTP是基于客户端/服务端（C/S）的架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。</p>\n<p>一个HTTP&quot;客户端&quot;是一个应用程序（Web浏览器或其他任何客户端），通过连接到服务器达到向服务器发送一个或多个HTTP的请求的目的。</p>\n<p>一个HTTP&quot;服务器&quot;同样也是一个应用程序（通常是一个Web服务，如Apache Web服务器或IIS服务器等），通过接收客户端的请求并向客户端发送HTTP响应数据。</p>\n<p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p>\n<p>一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。</p>\n<h2 id=\"%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF\">客户端请求消息 <a class=\"header-anchor\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF\">#</a></h2>\n<h2 id=\"%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AAhttp%E8%AF%B7%E6%B1%82%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF%E5%8C%85%E6%8B%AC%E4%BB%A5%E4%B8%8B%E6%A0%BC%E5%BC%8F%EF%BC%9A%E8%AF%B7%E6%B1%82%E8%A1%8C%EF%BC%88request-line%EF%BC%89%E3%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8%EF%BC%88header%EF%BC%89%E3%80%81%E7%A9%BA%E8%A1%8C%E5%92%8C%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%9B%9B%E4%B8%AA%E9%83%A8%E5%88%86%E7%BB%84%E6%88%90%EF%BC%8C%E4%B8%8B%E5%9B%BE%E7%BB%99%E5%87%BA%E4%BA%86%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%9A%84%E4%B8%80%E8%88%AC%E6%A0%BC%E5%BC%8F%E3%80%82\">客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。 <a class=\"header-anchor\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AAhttp%E8%AF%B7%E6%B1%82%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF%E5%8C%85%E6%8B%AC%E4%BB%A5%E4%B8%8B%E6%A0%BC%E5%BC%8F%EF%BC%9A%E8%AF%B7%E6%B1%82%E8%A1%8C%EF%BC%88request-line%EF%BC%89%E3%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8%EF%BC%88header%EF%BC%89%E3%80%81%E7%A9%BA%E8%A1%8C%E5%92%8C%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%9B%9B%E4%B8%AA%E9%83%A8%E5%88%86%E7%BB%84%E6%88%90%EF%BC%8C%E4%B8%8B%E5%9B%BE%E7%BB%99%E5%87%BA%E4%BA%86%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%9A%84%E4%B8%80%E8%88%AC%E6%A0%BC%E5%BC%8F%E3%80%82\">#</a></h2>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/a2jU1z.png\" alt=\"images\"></p>\n<h2 id=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF\">服务器响应消息 <a class=\"header-anchor\" href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF\">#</a></h2>\n<p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/0oST2U.png\" alt=\"images\"></p>\n<h2 id=\"%E5%AE%9E%E4%BE%8B\">实例 <a class=\"header-anchor\" href=\"#%E5%AE%9E%E4%BE%8B\">#</a></h2>\n<p>下面实例是一点典型的使用GET来传递数据的实例：</p>\n<p>客户端请求：</p>\n<pre><code>GET /hello.txt HTTP/1.1\nUser-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3\nHost: www.example.com\nAccept-Language: en, mi\n</code></pre>\n<p>服务端响应:</p>\n<pre><code>HTTP/1.1 200 OK\nDate: Mon, 27 Jul 2009 12:28:53 GMT\nServer: Apache\nLast-Modified: Wed, 22 Jul 2009 19:15:56 GMT\nETag: &quot;34aa387-d-1568eb00&quot;\nAccept-Ranges: bytes\nContent-Length: 51\nVary: Accept-Encoding\nContent-Type: text/plain\n</code></pre>\n<p>输出结果：</p>\n<pre><code>Hello World! My payload includes a trailing CRLF.\n</code></pre>\n",
  "link": "/zh-cn/docs/2.java/网络编程/1.Http.html",
  "meta": {}
}