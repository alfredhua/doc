{
  "filename": "8.多字段特性及自定义Analyzer.md",
  "__html": "<h2 id=\"%E5%A4%9A%E5%AD%97%E6%AE%B5%E7%89%B9%E6%80%A7\">多字段特性 <a class=\"header-anchor\" href=\"#%E5%A4%9A%E5%AD%97%E6%AE%B5%E7%89%B9%E6%80%A7\">#</a></h2>\n<ul>\n<li>\n<p>厂商名字直接实现精确匹配</p>\n<ul>\n<li>增加一个keyword字段</li>\n</ul>\n</li>\n<li>\n<p>使用不同的analyzer</p>\n<ul>\n<li>不同语言</li>\n<li>拼音字段的搜索</li>\n<li>支持为搜索和索引指定不同的analyzer</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"exact-values-v.s-full-text\">Exact Values v.s Full Text <a class=\"header-anchor\" href=\"#exact-values-v.s-full-text\">#</a></h2>\n<ul>\n<li>\n<p>Exact Values ： 包括数字、日期、具体的一个字符串（“Apple Store&quot;）</p>\n</li>\n<li>\n<p>es 中的keyword</p>\n</li>\n<li>\n<p>Full Text： 全文本，非结构化的文本数据</p>\n<ul>\n<li>es 中的 text</li>\n</ul>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/TXLpGz.png\" alt=\"image\"></p>\n</li>\n</ul>\n<h2 id=\"%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D\">自定义分词 <a class=\"header-anchor\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D\">#</a></h2>\n<blockquote>\n<p>当Elasticsearch 自带的分词器无法满足时，可以自定义分词，通过自组合不同的组件实现</p>\n</blockquote>\n<h2 id=\"character-filters\">Character Filters <a class=\"header-anchor\" href=\"#character-filters\">#</a></h2>\n<blockquote>\n<p>在Tokenizer之前对文本进行处理，例如增加删除及替换字符可以配置多个Character Filter。会影响Tokenizer的position和offset的信息</p>\n</blockquote>\n<p>自带的Character Filer</p>\n<ul>\n<li>\n<p>HTML strip ：去除html标签</p>\n<pre><code class=\"language-json\">POST _analyze\n{\n  \"tokenizer\": \"keyword\",\n  \"char_filter\": [\"html_strip\"],\n  \"text\":\"&lt;b&gt;hello word&lt;/b&gt;\"\n}\n</code></pre>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/2uww2y.png\" alt=\"image\"></p>\n</li>\n<li>\n<p>Mapping ： 字符串替换</p>\n<pre><code class=\"language-json\">POST _analyze\n{\n  \"tokenizer\": \"keyword\",\n  \"char_filter\": [\n    { \n      \"type\":\"mapping\",\n      \"mappings\":[\"- =&gt; _\"]\n    }\n  ],\n  \"text\":\"123-213-23-sd-324-df\"\n}\n</code></pre>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/Ey8RQZ.png\" alt=\"image\"></p>\n</li>\n<li>\n<p>Pattern replace : 正则匹配替换</p>\n<pre><code class=\"language-json\">GET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"char_filter\": [\n      {\n        \"type\" : \"pattern_replace\",\n        \"pattern\" : \"http://(.*)\",\n        \"replacement\" : \"$1\"\n      }\n    ],\n    \"text\" : \"http://www.elastic.co\"\n}\n</code></pre>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/tXaVxG.png\" alt=\"image\"></p>\n</li>\n</ul>\n<h2 id=\"tokeizer\">Tokeizer <a class=\"header-anchor\" href=\"#tokeizer\">#</a></h2>\n<blockquote>\n<p>将原始的文本按照一定的规则，切分为词。</p>\n</blockquote>\n<ul>\n<li>\n<p>Elasticsearch 内置的Tokenizers</p>\n<p>Whitespace / standard / uax_url_email / pattern / keyword /path_hieracrchy</p>\n</li>\n</ul>\n<p>举例：</p>\n<ul>\n<li>whitespace</li>\n</ul>\n<pre><code class=\"language-json\">POST _analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\"stop\"], \n  \"text\": \"The rain in Spain falls mainly on the plain\"\n}\n</code></pre>\n<pre><code>- path_hieracrchy\n</code></pre>\n<pre><code class=\"language-json\">POST _analyze\n{\n  \"tokenizer\": \"path_hierarchy\",\n  \"text\": \"/user/hua/a/b/c/d/e\"\n}\n</code></pre>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/bPsGcL.png\" alt=\"image\"></p>\n<ul>\n<li>可以用java开发插件，实现自己的tokenizer</li>\n</ul>\n<h2 id=\"token-filters\">Token Filters <a class=\"header-anchor\" href=\"#token-filters\">#</a></h2>\n<blockquote>\n<p>将tokenizer输出的单词，进行增加，修改，删除。</p>\n</blockquote>\n<p>自带的 token Filters</p>\n<p>lowercase / stop /synonym</p>\n<h2 id=\"%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AA-custom-analyzer\">设置一个 Custom Analyzer <a class=\"header-anchor\" href=\"#%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AA-custom-analyzer\">#</a></h2>\n<pre><code class=\"language-json\">PUT t_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {     \n        \"my_analyzer\":{   \n          \"tokenizer\":\"standard\",\n          \"char_filter\":\"my_char_filter\"  \n        }\n      },\n      \"char_filter\": {    \n        \"my_char_filter\":{  \n          \"type\":\"mapping\", \n          \"mappings\":[      \n            \":)=&gt;happy\",\n            \":(=&gt;sad\"\n          ]\n        }\n      }\n    }   \n  }\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/3.数据库/elasticsearch/8.多字段特性及自定义Analyzer.html",
  "meta": {}
}