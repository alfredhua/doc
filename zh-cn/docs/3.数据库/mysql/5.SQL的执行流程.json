{
  "filename": "5.SQL的执行流程.md",
  "__html": "<p>MySQL的查询执行流程：</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/090c22c8ec064b508b6f06c5059bbcd5\" alt=\"image\"></p>\n<h2 id=\"%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98\">查询缓存 <a class=\"header-anchor\" href=\"#%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98\">#</a></h2>\n<p>MySQL 内部自带了一个缓存模块。</p>\n<p>MySQL 的缓存默认是关闭的。</p>\n<pre><code class=\"language-mysql\">  show variables like 'query_cache%';\n</code></pre>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/edb14c8a9d2c4485aee798c231391298\" alt=\"image\"></p>\n<p>默认关闭的意思就是不推荐使用，为什么 MySQL 不推荐使用它自带的缓存呢?</p>\n<ol>\n<li>表里面任何一条数据发生变化的时候，这张表所有缓存都会失效，所以对于有大量数据更新的应用，也不适合。</li>\n<li>MySQL 自带的缓存的应用场景有限，第一个是它要求 SQL 语句必须一 模一样，中间多一个空格，字母大小写不同都被认为是不同的的 SQL。</li>\n</ol>\n<p>在 MySQL 8.0 中，查询缓存已经被移除了。</p>\n<h2 id=\"%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86(parser-%26-preprocessor)\">语法解析和预处理(Parser &amp; Preprocessor) <a class=\"header-anchor\" href=\"#%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86(parser-%26-preprocessor)\">#</a></h2>\n<p>对语句基于 SQL 语法进行词法和语法分析和语义的解析。</p>\n<ul>\n<li>\n<p>词法解析</p>\n<p>词法分析就是把一个完整的 SQL 语句打碎成一个个的单词。</p>\n</li>\n<li>\n<p>语法解析</p>\n<p>语法分析会对 SQL 做一些语法检查，比如单引号有没有闭合， 然后根据 MySQL 定义的语法规则，根据 SQL 语句生成一个数据结构。这个数据结构我 们把它叫做解析树(select_lex)。</p>\n</li>\n<li>\n<p>预处理器</p>\n<p>如果我写了一个词法和语法都正确的 SQL，但是表名或者字段不存在，会在 哪里报错?是在数据库的执行层还是解析器?</p>\n<p>实际上还是在解析的时候报错，解析 SQL 的环节里面有个预处理器。</p>\n<p>它会检查生成的解析树，解决解析器无法解析的语义。比如，它会检查表和列名是否存在，检查名字和别名，保证没有歧义。</p>\n</li>\n<li>\n<p>查询优化(Query Optimizer)与查询执行计划</p>\n<p>一条 SQL 语句是可以有很多种执行方式的，最终返回相同的结 果，他们是等价的。但是如果有这么多种执行方式，这些执行方式怎么得到的?最终选 择哪一种去执行?根据什么判断标准去选择?</p>\n<p>这个就是 MySQL 的查询优化器的模块(Optimizer)。</p>\n<p>查询优化器的目的就是根据解析树生成不同的执行计划(Execution Plan)，然后选择一种最优的执行计划，MySQL 里面使用的是基于开销(cost)的优化器，那种执行计 划开销最小，就用哪种。</p>\n<pre><code class=\"language-mysql\">show status like 'Last_query_cost';\n</code></pre>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html#statvar_Last_query_cost\">官网地址</a></p>\n<p>优化器最终会把解析树变成一个查询执行计划，查询执行计划是一个数据结构。</p>\n<p>MySQL 提供了一个执行计划的工具。我们在 SQL 语句前面加上 EXPLAIN，就可以看到执行计划的信息。</p>\n</li>\n<li>\n<p>存储引擎</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>MyISAM(3 个文件)</p>\n<p>表级锁定限制了读/写的性能，因此在 Web 和数据仓库配置中， 它通常用于只读或以读为主的工作。</p>\n<p>特点：</p>\n<ul>\n<li>支持表级别的锁(插入和更新会锁表)。不支持事务。</li>\n<li>拥有较高的插入(insert)和查询(select)速度。</li>\n<li>存储了表的行数(count 速度更快)。</li>\n</ul>\n<p>怎么快速向数据库插入 100 万条数据?</p>\n<p>我们有一种先用 MyISAM 插入数据，然后修改存储引擎为 InnoDB 的操作</p>\n</li>\n<li>\n<p>innoDB(2 个文件)</p>\n<p>特点:</p>\n<ul>\n<li>支持事务，支持外键，因此数据的完整性、一致性更高。</li>\n<li>支持行级别的锁和表级别的锁。</li>\n<li>支持读写并发，写不阻塞读(MVCC)。</li>\n<li>特殊的索引存放方式，可以减少 IO，提升查询效率。</li>\n</ul>\n<p>适合:经常更新的表，存在并发读写或者有事务处理的业务系统。</p>\n</li>\n<li>\n<p>Memory(1 个文件)</p>\n<ul>\n<li>把数据放在内存里面，读写的速度很快，但是数据库重启或者崩溃，数据会全部消 失。只适合做临时表。</li>\n</ul>\n</li>\n<li>\n<p>CSV(3 个文件)</p>\n<p>它的表实际上是带有逗号分隔值的文本文件。csv 表允许以 csv 格式导入或转储数据， 以便与读写相同格式的脚本和应用程序交换数据。因为 csv 表没有索引，所以通常在正 常操作期间将数据保存在 innodb 表中，并且只在导入或导出阶段使用 csv 表。</p>\n<p>特点:</p>\n<blockquote>\n<p>不允许空行，不支持索引。格式通用，可以直接编辑，适合在不同数据库之 间导入导出。</p>\n</blockquote>\n</li>\n<li>\n<p>Archive(2 个文件)</p>\n<p>这些紧凑的未索引的表用于存储和检索大量很少引用的历史、存档或安全审计信息。</p>\n<p>特点:</p>\n<blockquote>\n<p>不支持索引，不支持 update delete。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%3F\">如何选择存储引擎? <a class=\"header-anchor\" href=\"#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%3F\">#</a></h2>\n<ul>\n<li>如果对数据一致性要求比较高，需要事务支持，可以选择 InnoDB。</li>\n<li>如果数据查询多更新少，对查询性能要求比较高，可以选择 MyISAM。</li>\n<li>如果需要一个用于查询的临时表，可以选择 Memory。</li>\n<li>如果所有的存储引擎都不能满足你的需求，并且技术能力足够，可以根据官网内部\n手册用 C 语言开发一个存储引擎:<a href=\"https://dev.mysql.com/doc/internals/en/custom-engine.html\">官网地址</a></li>\n</ul>\n<p>MySQL的更新执行流程：</p>\n<p>缓存池：</p>\n<p>下一次读取相同的页，先判断是不是在缓冲池里面，如果是，就直接读取，不用再 次访问磁盘。</p>\n<p>修改数据的时候，先修改缓冲池里面的页。内存的数据页和磁盘数据不一致的时候， 我们把它叫做脏页。InnoDB 里面有专门的后台线程把 Buffer Pool 的数据写入到磁盘， 每隔一段时间就一次性地把多个修改写入磁盘，这个动作就叫做刷脏。</p>\n<p>redo log：</p>\n<p>redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块区域总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p>\n<p>write pos 和 checkpoint 之间的是区域上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示区域满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p>\n<p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。</p>\n<p>binlog：</p>\n<p>binlog 以事件的形式记录了所有的 DDL 和 DML 语句(因为它记录的是操作而不是 数据值，属于逻辑日志)，可以用来做主从复制和数据恢复。\n跟 redo log 不一样，它的文件内容是可以追加的，没有固定大小限制。\n在开启了 binlog 功能的情况下，我们可以把 binlog 导出成 SQL 语句，把所有的操 作重放一遍，来实现数据的恢复。</p>\n<p>binlog 的另一个功能就是用来实现主从复制，它的原理就是从服务器读取主服务器的binlog，然后执行一遍。</p>\n<p>Update 操作流程：\n如：</p>\n<pre><code class=\"language-mysql\">update T set c=c+1 where ID=2;\n</code></pre>\n<ul>\n<li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li>\n<li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li>\n<li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li>\n<li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li>\n<li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li>\n</ul>\n<h2 id=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E4%B8%A4%E4%BB%BD%E6%97%A5%E5%BF%97%E5%91%A2%EF%BC%9F\">为什么会有两份日志呢？ <a class=\"header-anchor\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E4%B8%A4%E4%BB%BD%E6%97%A5%E5%BF%97%E5%91%A2%EF%BC%9F\">#</a></h2>\n<p>MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p>\n<ul>\n<li>redo log 是 InnoDB 引擎特有的；</li>\n<li>binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li>\n<li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li>\n</ul>\n<p>MySQL 分成三层，跟客户端对接的连接层，真正执行操作的服 务层，和跟硬件打交道的存储引擎层</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/58b3dbf5c81447e2a007f35074007cf4\" alt=\"image\"></p>\n",
  "link": "/zh-cn/docs/3.数据库/mysql/5.SQL的执行流程.html",
  "meta": {}
}