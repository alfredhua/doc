{
  "filename": "2.消息模式.md",
  "__html": "<h2 id=\"%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F\">简单模式 <a class=\"header-anchor\" href=\"#%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F\">#</a></h2>\n<p>一个生产者P发送消息到队列Q,一个消费者C接收</p>\n<p><a href=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/u=3536793445,2882105203&amp;fm=26&amp;gp=0.gif\">https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/u=3536793445,2882105203&amp;fm=26&amp;gp=0.gif</a></p>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/9e555b0d8fa144cfbb3421e3b19a018f\" alt=\"image\"></p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Send</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> String QUEUE_NAME = <span class=\"hljs-string\">\"hello\"</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n        factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n        <span class=\"hljs-keyword\">try</span> (Connection connection = factory.newConnection();\n             Channel channel = connection.createChannel()) {\n            channel.queueDeclare(QUEUE_NAME, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">null</span>);\n            String message = <span class=\"hljs-string\">\"Hello World!\"</span>;\n            channel.basicPublish(<span class=\"hljs-string\">\"\"</span>, QUEUE_NAME, <span class=\"hljs-keyword\">null</span>, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(<span class=\"hljs-string\">\" [x] Sent '\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n        }\n    }\n}\n\n</code></pre>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Recv</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> String QUEUE_NAME = <span class=\"hljs-string\">\"hello\"</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n    channel.queueDeclare(QUEUE_NAME, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">null</span>);\n    System.out.println(<span class=\"hljs-string\">\" [*] Waiting for messages. To exit press CTRL+C\"</span>);\n\n  }\n}\n\n</code></pre>\n<h2 id=\"%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97%E6%A8%A1%E5%BC%8Fwork-queue\">工作队列模式Work Queue <a class=\"header-anchor\" href=\"#%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97%E6%A8%A1%E5%BC%8Fwork-queue\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/f25207b901d94d2fbbad2f3d0245aa0d\" alt=\"image\"></p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NewTask</span> </span>{\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String TASK_QUEUE_NAME = <span class=\"hljs-string\">\"task_queue\"</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    <span class=\"hljs-keyword\">try</span> (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n        channel.queueDeclare(TASK_QUEUE_NAME, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">null</span>);\n\n        String message = String.join(<span class=\"hljs-string\">\" \"</span>, argv);\n\n        channel.basicPublish(<span class=\"hljs-string\">\"\"</span>, TASK_QUEUE_NAME,\n                MessageProperties.PERSISTENT_TEXT_PLAIN,\n                message.getBytes(<span class=\"hljs-string\">\"UTF-8\"</span>));\n        System.out.println(<span class=\"hljs-string\">\" [x] Sent '\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Recv</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String TASK_QUEUE_NAME = <span class=\"hljs-string\">\"task_queue\"</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n        factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n        factory.setUsername(<span class=\"hljs-string\">\"guest\"</span>);\n        factory.setPassword(<span class=\"hljs-string\">\"guest\"</span>);\n        Connection connection = factory.newConnection();\n        Channel channel = connection.createChannel();\n        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; {\n            String message = <span class=\"hljs-keyword\">new</span> String(delivery.getBody(), <span class=\"hljs-string\">\"UTF-8\"</span>);\n            System.out.println(<span class=\"hljs-string\">\" [x] Received '\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n            <span class=\"hljs-keyword\">try</span> {\n                doWork(message);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            } <span class=\"hljs-keyword\">finally</span> {\n                System.out.println(<span class=\"hljs-string\">\" [x] Done\"</span>);\n            }\n        };\n        <span class=\"hljs-keyword\">boolean</span> autoAck = <span class=\"hljs-keyword\">true</span>; <span class=\"hljs-comment\">// acknowledgment is covered below</span>\n        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -&gt; { });\n\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doWork</span><span class=\"hljs-params\">(String task)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">char</span> ch: task.toCharArray()) {\n            <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">'.'</span>) Thread.sleep(<span class=\"hljs-number\">1000</span>);\n        }\n    }\n}\n\n</code></pre>\n<h2 id=\"%E5%8F%91%E5%B8%83%2F%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8Fpublish%2Fsubscribe\">发布/订阅模式Publish/Subscribe <a class=\"header-anchor\" href=\"#%E5%8F%91%E5%B8%83%2F%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8Fpublish%2Fsubscribe\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/64d071ed89c74822988c6b7554ecc4c9\" alt=\"image\"></p>\n<p>功能：一个生产者发送的消息会被多个消费者获取。一个生产者、一个交换机、多个队列、多个消费者</p>\n<p>生产者：可以将消息发送到队列或者是交换机。</p>\n<p>消费者：只能从队列中获取消息。</p>\n<p>如果消息发送到没有队列绑定的交换机上，那么消息将丢失。\n交换机不能存储消息，消息存储在队列中</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EmitLog</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String EXCHANGE_NAME = <span class=\"hljs-string\">\"logs\"</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    <span class=\"hljs-keyword\">try</span> (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n        channel.exchangeDeclare(EXCHANGE_NAME, <span class=\"hljs-string\">\"fanout\"</span>);\n\n        String message = argv.length &lt; <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">\"info: Hello World!\"</span> :\n                            String.join(<span class=\"hljs-string\">\" \"</span>, argv);\n\n        channel.basicPublish(EXCHANGE_NAME, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-keyword\">null</span>, message.getBytes(<span class=\"hljs-string\">\"UTF-8\"</span>));\n        System.out.println(<span class=\"hljs-string\">\" [x] Sent '\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n    }\n  }\n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReceiveLogs</span> </span>{\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String EXCHANGE_NAME = <span class=\"hljs-string\">\"logs\"</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n\n    channel.exchangeDeclare(EXCHANGE_NAME, <span class=\"hljs-string\">\"fanout\"</span>);\n    String queueName = channel.queueDeclare().getQueue();\n    channel.queueBind(queueName, EXCHANGE_NAME, <span class=\"hljs-string\">\"\"</span>);\n\n    System.out.println(<span class=\"hljs-string\">\" [*] Waiting for messages. To exit press CTRL+C\"</span>);\n\n    DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; {\n        String message = <span class=\"hljs-keyword\">new</span> String(delivery.getBody(), <span class=\"hljs-string\">\"UTF-8\"</span>);\n        System.out.println(<span class=\"hljs-string\">\" [x] Received '\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n    };\n    channel.basicConsume(queueName, <span class=\"hljs-keyword\">true</span>, deliverCallback, consumerTag -&gt; { });\n  }\n}\n\n</code></pre>\n<h2 id=\"%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8Frouting\">路由模式Routing <a class=\"header-anchor\" href=\"#%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8Frouting\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/6548ba200d1a4e25a074cdf243fdb667\" alt=\"image\"></p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EmitLogDirect</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String EXCHANGE_NAME = <span class=\"hljs-string\">\"direct_logs\"</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    <span class=\"hljs-keyword\">try</span> (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n        channel.exchangeDeclare(EXCHANGE_NAME, <span class=\"hljs-string\">\"direct\"</span>);\n\n        String severity = getSeverity(argv);\n        String message = getMessage(argv);\n\n        channel.basicPublish(EXCHANGE_NAME, severity, <span class=\"hljs-keyword\">null</span>, message.getBytes(<span class=\"hljs-string\">\"UTF-8\"</span>));\n        System.out.println(<span class=\"hljs-string\">\" [x] Sent '\"</span> + severity + <span class=\"hljs-string\">\"':'\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n    }\n  }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getSeverity</span><span class=\"hljs-params\">(String[] strings)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (strings.length &lt; <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"info\"</span>;\n        <span class=\"hljs-keyword\">return</span> strings[<span class=\"hljs-number\">0</span>];\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getMessage</span><span class=\"hljs-params\">(String[] strings)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (strings.length &lt; <span class=\"hljs-number\">2</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello World!\"</span>;\n        <span class=\"hljs-keyword\">return</span> joinStrings(strings, <span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">joinStrings</span><span class=\"hljs-params\">(String[] strings, String delimiter, <span class=\"hljs-keyword\">int</span> startIndex)</span> </span>{\n        <span class=\"hljs-keyword\">int</span> length = strings.length;\n        <span class=\"hljs-keyword\">if</span> (length == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n        <span class=\"hljs-keyword\">if</span> (length &lt;= startIndex) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n        StringBuilder words = <span class=\"hljs-keyword\">new</span> StringBuilder(strings[startIndex]);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = startIndex + <span class=\"hljs-number\">1</span>; i &lt; length; i++) {\n            words.append(delimiter).append(strings[i]);\n        }\n        <span class=\"hljs-keyword\">return</span> words.toString();\n    }\n}\n\n</code></pre>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReceiveLogsDirect</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String EXCHANGE_NAME = <span class=\"hljs-string\">\"direct_logs\"</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n\n    channel.exchangeDeclare(EXCHANGE_NAME, <span class=\"hljs-string\">\"direct\"</span>);\n    String queueName = channel.queueDeclare().getQueue();\n\n    <span class=\"hljs-keyword\">if</span> (argv.length &lt; <span class=\"hljs-number\">1</span>) {\n        System.err.println(<span class=\"hljs-string\">\"Usage: ReceiveLogsDirect [info] [warning] [error]\"</span>);\n        System.exit(<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">for</span> (String severity : argv) {\n        channel.queueBind(queueName, EXCHANGE_NAME, severity);\n    }\n    System.out.println(<span class=\"hljs-string\">\" [*] Waiting for messages. To exit press CTRL+C\"</span>);\n\n    DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; {\n        String message = <span class=\"hljs-keyword\">new</span> String(delivery.getBody(), <span class=\"hljs-string\">\"UTF-8\"</span>);\n        System.out.println(<span class=\"hljs-string\">\" [x] Received '\"</span> +\n            delivery.getEnvelope().getRoutingKey() + <span class=\"hljs-string\">\"':'\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n    };\n    channel.basicConsume(queueName, <span class=\"hljs-keyword\">true</span>, deliverCallback, consumerTag -&gt; { });\n  }\n}\n</code></pre>\n<h2 id=\"%E9%80%9A%E9%85%8D%E7%AC%A6%E6%A8%A1%E5%BC%8Ftopics\">通配符模式Topics <a class=\"header-anchor\" href=\"#%E9%80%9A%E9%85%8D%E7%AC%A6%E6%A8%A1%E5%BC%8Ftopics\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/2b79943e38774069b49cf6893437fb9c\" alt=\"image\"></p>\n<p>生产者P发送消息到交换机X，type=topic，交换机根据绑定队列的routing key的值进行通配符匹配；\n符号#：匹配一个或者多个词lazy.# 可以匹配lazy.irs或者lazy.irs.cor</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EmitLogTopic</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String EXCHANGE_NAME = <span class=\"hljs-string\">\"topic_logs\"</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    <span class=\"hljs-keyword\">try</span> (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n\n        channel.exchangeDeclare(EXCHANGE_NAME, <span class=\"hljs-string\">\"topic\"</span>);\n\n        String routingKey = getRouting(argv);\n        String message = getMessage(argv);\n\n        channel.basicPublish(EXCHANGE_NAME, routingKey, <span class=\"hljs-keyword\">null</span>, message.getBytes(<span class=\"hljs-string\">\"UTF-8\"</span>));\n        System.out.println(<span class=\"hljs-string\">\" [x] Sent '\"</span> + routingKey + <span class=\"hljs-string\">\"':'\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n    }\n  }\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getRouting</span><span class=\"hljs-params\">(String[] strings)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (strings.length &lt; <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"anonymous.info\"</span>;\n        <span class=\"hljs-keyword\">return</span> strings[<span class=\"hljs-number\">0</span>];\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getMessage</span><span class=\"hljs-params\">(String[] strings)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (strings.length &lt; <span class=\"hljs-number\">2</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello World!\"</span>;\n        <span class=\"hljs-keyword\">return</span> joinStrings(strings, <span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">joinStrings</span><span class=\"hljs-params\">(String[] strings, String delimiter, <span class=\"hljs-keyword\">int</span> startIndex)</span> </span>{\n        <span class=\"hljs-keyword\">int</span> length = strings.length;\n        <span class=\"hljs-keyword\">if</span> (length == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n        <span class=\"hljs-keyword\">if</span> (length &lt; startIndex) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n        StringBuilder words = <span class=\"hljs-keyword\">new</span> StringBuilder(strings[startIndex]);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = startIndex + <span class=\"hljs-number\">1</span>; i &lt; length; i++) {\n            words.append(delimiter).append(strings[i]);\n        }\n        <span class=\"hljs-keyword\">return</span> words.toString();\n    }\n}\n\n</code></pre>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReceiveLogsTopic</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String EXCHANGE_NAME = <span class=\"hljs-string\">\"topic_logs\"</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n    factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n\n    channel.exchangeDeclare(EXCHANGE_NAME, <span class=\"hljs-string\">\"topic\"</span>);\n    String queueName = channel.queueDeclare().getQueue();\n\n    <span class=\"hljs-keyword\">if</span> (argv.length &lt; <span class=\"hljs-number\">1</span>) {\n        System.err.println(<span class=\"hljs-string\">\"Usage: ReceiveLogsTopic [binding_key]...\"</span>);\n        System.exit(<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">for</span> (String bindingKey : argv) {\n        channel.queueBind(queueName, EXCHANGE_NAME, bindingKey);\n    }\n\n    System.out.println(<span class=\"hljs-string\">\" [*] Waiting for messages. To exit press CTRL+C\"</span>);\n\n    DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; {\n        String message = <span class=\"hljs-keyword\">new</span> String(delivery.getBody(), <span class=\"hljs-string\">\"UTF-8\"</span>);\n        System.out.println(<span class=\"hljs-string\">\" [x] Received '\"</span> +\n            delivery.getEnvelope().getRoutingKey() + <span class=\"hljs-string\">\"':'\"</span> + message + <span class=\"hljs-string\">\"'\"</span>);\n    };\n    channel.basicConsume(queueName, <span class=\"hljs-keyword\">true</span>, deliverCallback, consumerTag -&gt; { });\n  }\n}\n\n</code></pre>\n<h2 id=\"rpc\">RPC <a class=\"header-anchor\" href=\"#rpc\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/5f96e1ef416148e98a833ed10de4be44\" alt=\"image\"></p>\n<pre><code class=\"language-java\">\n\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RPCServer</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String RPC_QUEUE_NAME = <span class=\"hljs-string\">\"rpc_queue\"</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> fib(n - <span class=\"hljs-number\">1</span>) + fib(n - <span class=\"hljs-number\">2</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n        factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n\n        <span class=\"hljs-keyword\">try</span> (Connection connection = factory.newConnection();\n             Channel channel = connection.createChannel()) {\n            channel.queueDeclare(RPC_QUEUE_NAME, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">null</span>);\n            channel.queuePurge(RPC_QUEUE_NAME);\n\n            channel.basicQos(<span class=\"hljs-number\">1</span>);\n\n            System.out.println(<span class=\"hljs-string\">\" [x] Awaiting RPC requests\"</span>);\n\n            Object monitor = <span class=\"hljs-keyword\">new</span> Object();\n            DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; {\n                AMQP.BasicProperties replyProps = <span class=\"hljs-keyword\">new</span> AMQP.BasicProperties\n                        .Builder()\n                        .correlationId(delivery.getProperties().getCorrelationId())\n                        .build();\n\n                String response = <span class=\"hljs-string\">\"\"</span>;\n\n                <span class=\"hljs-keyword\">try</span> {\n                    String message = <span class=\"hljs-keyword\">new</span> String(delivery.getBody(), <span class=\"hljs-string\">\"UTF-8\"</span>);\n                    <span class=\"hljs-keyword\">int</span> n = Integer.parseInt(message);\n\n                    System.out.println(<span class=\"hljs-string\">\" [.] fib(\"</span> + message + <span class=\"hljs-string\">\")\"</span>);\n                    response += fib(n);\n                } <span class=\"hljs-keyword\">catch</span> (RuntimeException e) {\n                    System.out.println(<span class=\"hljs-string\">\" [.] \"</span> + e.toString());\n                } <span class=\"hljs-keyword\">finally</span> {\n                    channel.basicPublish(<span class=\"hljs-string\">\"\"</span>, delivery.getProperties().getReplyTo(), replyProps, response.getBytes(<span class=\"hljs-string\">\"UTF-8\"</span>));\n                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class=\"hljs-keyword\">false</span>);\n                    <span class=\"hljs-comment\">// RabbitMq consumer worker thread notifies the RPC server owner thread</span>\n                    <span class=\"hljs-keyword\">synchronized</span> (monitor) {\n                        monitor.notify();\n                    }\n                }\n            };\n\n            channel.basicConsume(RPC_QUEUE_NAME, <span class=\"hljs-keyword\">false</span>, deliverCallback, (consumerTag -&gt; { }));\n            <span class=\"hljs-comment\">// Wait and be prepared to consume the message from RPC client.</span>\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n                <span class=\"hljs-keyword\">synchronized</span> (monitor) {\n                    <span class=\"hljs-keyword\">try</span> {\n                        monitor.wait();\n                    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n\n</code></pre>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RPCClient</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AutoCloseable</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Connection connection;\n    <span class=\"hljs-keyword\">private</span> Channel channel;\n    <span class=\"hljs-keyword\">private</span> String requestQueueName = <span class=\"hljs-string\">\"rpc_queue\"</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">RPCClient</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException, TimeoutException </span>{\n        ConnectionFactory factory = <span class=\"hljs-keyword\">new</span> ConnectionFactory();\n        factory.setHost(<span class=\"hljs-string\">\"localhost\"</span>);\n\n        connection = factory.newConnection();\n        channel = connection.createChannel();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] argv)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> (RPCClient fibonacciRpc = <span class=\"hljs-keyword\">new</span> RPCClient()) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">32</span>; i++) {\n                String i_str = Integer.toString(i);\n                System.out.println(<span class=\"hljs-string\">\" [x] Requesting fib(\"</span> + i_str + <span class=\"hljs-string\">\")\"</span>);\n                String response = fibonacciRpc.call(i_str);\n                System.out.println(<span class=\"hljs-string\">\" [.] Got '\"</span> + response + <span class=\"hljs-string\">\"'\"</span>);\n            }\n        } <span class=\"hljs-keyword\">catch</span> (IOException | TimeoutException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">call</span><span class=\"hljs-params\">(String message)</span> <span class=\"hljs-keyword\">throws</span> IOException, InterruptedException </span>{\n        <span class=\"hljs-keyword\">final</span> String corrId = UUID.randomUUID().toString();\n\n        String replyQueueName = channel.queueDeclare().getQueue();\n        AMQP.BasicProperties props = <span class=\"hljs-keyword\">new</span> AMQP.BasicProperties\n                .Builder()\n                .correlationId(corrId)\n                .replyTo(replyQueueName)\n                .build();\n\n        channel.basicPublish(<span class=\"hljs-string\">\"\"</span>, requestQueueName, props, message.getBytes(<span class=\"hljs-string\">\"UTF-8\"</span>));\n\n        <span class=\"hljs-keyword\">final</span> BlockingQueue&lt;String&gt; response = <span class=\"hljs-keyword\">new</span> ArrayBlockingQueue&lt;&gt;(<span class=\"hljs-number\">1</span>);\n\n        String ctag = channel.basicConsume(replyQueueName, <span class=\"hljs-keyword\">true</span>, (consumerTag, delivery) -&gt; {\n            <span class=\"hljs-keyword\">if</span> (delivery.getProperties().getCorrelationId().equals(corrId)) {\n                response.offer(<span class=\"hljs-keyword\">new</span> String(delivery.getBody(), <span class=\"hljs-string\">\"UTF-8\"</span>));\n            }\n        }, consumerTag -&gt; {\n        });\n\n        String result = response.take();\n        channel.basicCancel(ctag);\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">close</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        connection.close();\n    }\n}\n\n</code></pre>\n<h2 id=\"%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B%E4%BA%A4%E6%8D%A2%E5%99%A8-fanout%2Cdirect%2Ctopic\">三种类型交换器 Fanout,Direct,Topic <a class=\"header-anchor\" href=\"#%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B%E4%BA%A4%E6%8D%A2%E5%99%A8-fanout%2Cdirect%2Ctopic\">#</a></h2>\n<p>fanout：不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。</p>\n<p>direct：处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “test”，则只有被标记为“test”的消息才被转发，不会转发test.aaa，也不会转发dog.123，只会转发test。</p>\n<p>topic：将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.</em>” 只会匹配到“audit.irs”。</p>\n<p><img src=\"https://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/blog/qrcode_for_gh_55da400f21ce_344.jpg\" style=\"width:200px;height:200px;margin-left:100px\"></img></p>\n<div style=\"margin-left:50px;color:red;font-size:32px\">关注公众号，精彩继续</div>",
  "link": "/zh-cn/docs/4.mq/rabbitmq/2.消息模式.html",
  "meta": {}
}