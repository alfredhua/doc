{
  "filename": "4.消息可靠性投递.md",
  "__html": "<h1 id=\"%E6%B6%88%E6%81%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92\">消息可靠性投递 <a class=\"header-anchor\" href=\"#%E6%B6%88%E6%81%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92\">#</a></h1>\n<h2 id=\"%E6%B6%88%E6%81%AF%E8%90%BD%E5%BA%93%EF%BC%8C%E5%AF%B9%E6%B6%88%E6%81%AF%E7%8A%B6%E6%80%81%E6%89%93%E6%A0%87%E3%80%82%2B%E8%BD%AE%E8%AE%AD\">消息落库，对消息状态打标。+轮训 <a class=\"header-anchor\" href=\"#%E6%B6%88%E6%81%AF%E8%90%BD%E5%BA%93%EF%BC%8C%E5%AF%B9%E6%B6%88%E6%81%AF%E7%8A%B6%E6%80%81%E6%89%93%E6%A0%87%E3%80%82%2B%E8%BD%AE%E8%AE%AD\">#</a></h2>\n<p>状态0，未处理，1：已经处理，2：失败（需要补偿机制）。</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/0013e84930e34651932a5adc1a7e48e4\" alt=\"image\"></p>\n<ol>\n<li>将业务订单数据和生成的Message进行持久化操作</li>\n<li>将Message发送到Broker服务器中</li>\n<li>通过RabbitMQ的Confirm机制，在producer端，监听服务器是否ACK。</li>\n<li>如果ACK了，就将Message这条数据状态更新为已发送。如果失败，修改为失败状态。</li>\n<li>分布式定时任务查询数据库3分钟（这个具体时间应该根据的时效性来定）之前的发送失败的消息</li>\n<li>重新发送消息，记录发送次数</li>\n<li>如果发送次数过多仍然失败，那么就需要人工排查之类的操作。</li>\n</ol>\n<p>优点：</p>\n<blockquote>\n<p>能够保证消息百分百不丢失</p>\n</blockquote>\n<p>缺点：</p>\n<blockquote>\n<p>第一步中涉及到分布式事务问题，分布式事务一点会降低时效性。</p>\n</blockquote>\n<h2 id=\"%E6%B6%88%E6%81%AF%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%8A%95%E9%80%92%EF%BC%8C%E5%81%9A%E4%BA%8C%E6%AC%A1%E7%A1%AE%E8%AE%A4%EF%BC%8C%E5%9B%9E%E8%B0%83%E6%A3%80%E6%9F%A5%E3%80%82\">消息的延迟投递，做二次确认，回调检查。 <a class=\"header-anchor\" href=\"#%E6%B6%88%E6%81%AF%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%8A%95%E9%80%92%EF%BC%8C%E5%81%9A%E4%BA%8C%E6%AC%A1%E7%A1%AE%E8%AE%A4%EF%BC%8C%E5%9B%9E%E8%B0%83%E6%A3%80%E6%9F%A5%E3%80%82\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/6f11c4835f234c11885298e36f667d8d\" alt=\"image\"></p>\n<p>流程图中，颜色不同的代表不同的message</p>\n<ol>\n<li>将业务订单持久化</li>\n<li>发送一条Message到broker(称之为主Message)，再发送相同的一条到不同的队列或者交换机(这条称为确认Message)中。</li>\n<li>主Message由实际业务处理端消费后，生成一条响应Message。之前的确认Message由Message Service应用处理入库。\n4~6. 实际业务处理端发送的确认Message由Message Service接收后，将原Message状态修改。</li>\n<li>如果该条Message没有被确认，则通过rpc调用重新由producer进行全过程。</li>\n</ol>\n<p>优点：</p>\n<blockquote>\n<p>相对于数据库持久化方案来说响应速度有所提升</p>\n</blockquote>\n<p>缺点：</p>\n<blockquote>\n<p>系统复杂性有点高\n万一两条消息都失败了，消息存在丢失情况，仍需Confirm机制做补偿</p>\n</blockquote>\n",
  "link": "/zh-cn/docs/4.mq/rabbitmq/4.消息可靠性投递.html",
  "meta": {}
}