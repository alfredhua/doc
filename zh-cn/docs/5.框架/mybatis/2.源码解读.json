{
  "filename": "2.源码解读.md",
  "__html": "<ol>\n<li>mybatis的核心模块</li>\n</ol>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/5c79a65f3dc24481b8dff7b3a797493a\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>注解注入方式（入口）这里用的是Hikari连接，其它连接方式道理一样</li>\n</ol>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>(name = <span class=\"hljs-string\">\"dataSource\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title\">dataSource</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"==============  url  \"</span> +  url );\n\n        <span class=\"hljs-keyword\">if</span> (maxpoolsize &lt; <span class=\"hljs-number\">10</span>) {\n            maxpoolsize = <span class=\"hljs-number\">10</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (maxpoolsize &gt; <span class=\"hljs-number\">100</span>) {\n            maxpoolsize = <span class=\"hljs-number\">100</span>;\n        }\n        <span class=\"hljs-keyword\">final</span> HikariDataSource ds = <span class=\"hljs-keyword\">new</span> HikariDataSource();\n        ds.setMaximumPoolSize(maxpoolsize);\n        ds.setDriverClassName(driverClassName);\n        ds.setJdbcUrl(url);\n        ds.setUsername(username);\n        ds.setPassword(password);\n        <span class=\"hljs-keyword\">return</span> ds;\n    }\n\n   <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSessionFactory <span class=\"hljs-title\">sqlSessionFactory</span><span class=\"hljs-params\">(@Qualifier(<span class=\"hljs-string\">\"dataSource\"</span>)</span> DataSource dataSource) <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        org.apache.ibatis.logging.LogFactory.useStdOutLogging();\n        <span class=\"hljs-keyword\">final</span> SqlSessionFactoryBean sessionFactory = <span class=\"hljs-keyword\">new</span> SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        <span class=\"hljs-keyword\">return</span> sessionFactory.getObject();\n    }\n\n</code></pre>\n<p>关键在于：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">final</span> SqlSessionFactoryBean sessionFactory = <span class=\"hljs-keyword\">new</span> SqlSessionFactoryBean();\nsessionFactory.setDataSource(dataSource);\n<span class=\"hljs-keyword\">return</span> sessionFactory.getObject();\n</code></pre>\n<p>sessionFactory.setDataSource(dataSource);\n是在进行数据库配置项初始化。</p>\n<p>sessionFactory.getObject();</p>\n<p>在mybatis-spring.jar中存在SqlSessionFactoryBean。</p>\n<pre><code class=\"language-java\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSessionFactory <span class=\"hljs-title\">getObject</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.sqlSessionFactory == <span class=\"hljs-keyword\">null</span>) {\n      afterPropertiesSet();\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.sqlSessionFactory;\n  }\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterPropertiesSet</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    notNull(dataSource, <span class=\"hljs-string\">\"Property 'dataSource' is required\"</span>);\n    notNull(sqlSessionFactoryBuilder, <span class=\"hljs-string\">\"Property 'sqlSessionFactoryBuilder' is required\"</span>);\n\n    <span class=\"hljs-keyword\">this</span>.sqlSessionFactory = buildSqlSessionFactory();\n  }\n</code></pre>\n<p>getObject()中的afterPropertiesSet方法调用buildSqlSessionFactory()才是进行mybatis的初始化。</p>\n<p>mybatis的真正的入口</p>\n<pre><code class=\"language-java\">sqlSessionFactoryBuilder.build(configuration);\n</code></pre>\n<pre><code class=\"language-java\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSessionFactory <span class=\"hljs-title\">build</span><span class=\"hljs-params\">(Configuration config)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultSqlSessionFactory(config);\n  }\n</code></pre>\n<p>加载config配置文件：这里给注入到DefaultSqlSessionFactory的config， openSession的时候config才会有值。openSessionFromDataSource()方法加载对应的exector，获取对应的sqlSession。</p>\n<pre><code class=\"language-java\"> <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSession <span class=\"hljs-title\">openSession</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">false</span>);\n  }\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> SqlSession <span class=\"hljs-title\">openSessionFromDataSource</span><span class=\"hljs-params\">(ExecutorType execType, TransactionIsolationLevel level, <span class=\"hljs-keyword\">boolean</span> autoCommit)</span> </span>{\n    Transaction tx = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">final</span> Environment environment = configuration.getEnvironment();\n      <span class=\"hljs-keyword\">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      <span class=\"hljs-keyword\">final</span> Executor executor = configuration.newExecutor(tx, execType);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultSqlSession(configuration, executor, autoCommit);\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n      closeTransaction(tx); <span class=\"hljs-comment\">// may have fetched a connection so lets call close()</span>\n      <span class=\"hljs-keyword\">throw</span> ExceptionFactory.wrapException(<span class=\"hljs-string\">\"Error opening session.  Cause: \"</span> + e, e);\n    } <span class=\"hljs-keyword\">finally</span> {\n      ErrorContext.instance().reset();\n    }\n  }\n</code></pre>\n<p>拿到DefaultSqlSession 对象后采用反射的方式 mapperProxyFactory.newInstance(sqlSession) 获取mapper对象，mapperRegistry中存在 Map&lt;Class<?>, MapperProxyFactory<?>&gt; knownMappers = new HashMap&lt;&gt;()，存放相应的代理工厂类，可以获取到相应的代理对象</p>\n<pre><code class=\"language-java\"> <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">getMapper</span><span class=\"hljs-params\">(Class&lt;T&gt; type)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> configuration.getMapper(type, <span class=\"hljs-keyword\">this</span>);\n  }\n</code></pre>\n<p>MapperProxy是代理类，invoke方法执行相应的sql，MapperMethod.execute(sqlSession, args);执行相应的方法</p>\n<pre><code class=\"language-java\">\n  <span class=\"hljs-comment\">/**\n   * 反射入口\n   * <span class=\"hljs-doctag\">@param</span> proxy\n   * <span class=\"hljs-doctag\">@param</span> method\n   * <span class=\"hljs-doctag\">@param</span> args\n   * <span class=\"hljs-doctag\">@return</span>\n   * <span class=\"hljs-doctag\">@throws</span> Throwable\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">if</span> (Object<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">equals</span>(<span class=\"hljs-title\">method</span>.<span class=\"hljs-title\">getDeclaringClass</span>())) </span>{\n        <span class=\"hljs-keyword\">return</span> method.invoke(<span class=\"hljs-keyword\">this</span>, args);\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isDefaultMethod(method)) {\n        <span class=\"hljs-keyword\">return</span> invokeDefaultMethod(proxy, method, args);\n      }\n    } <span class=\"hljs-keyword\">catch</span> (Throwable t) {\n      <span class=\"hljs-keyword\">throw</span> ExceptionUtil.unwrapThrowable(t);\n    }\n    <span class=\"hljs-keyword\">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);\n    <span class=\"hljs-keyword\">return</span> mapperMethod.execute(sqlSession, args);\n  }\n</code></pre>\n<p>mapperMethod.execute(sqlSession, args)：是相应的插入，更新，删除，查询方法。</p>\n<pre><code class=\"language-java\">\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(SqlSession sqlSession, Object[] args)</span> </span>{\n    Object result;\n    <span class=\"hljs-keyword\">switch</span> (command.getType()) {\n      <span class=\"hljs-keyword\">case</span> INSERT: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.insert(command.getName(), param));\n        <span class=\"hljs-keyword\">break</span>;\n      }\n      <span class=\"hljs-keyword\">case</span> UPDATE: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.update(command.getName(), param));\n        <span class=\"hljs-keyword\">break</span>;\n      }\n      <span class=\"hljs-keyword\">case</span> DELETE: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.delete(command.getName(), param));\n        <span class=\"hljs-keyword\">break</span>;\n      }\n      <span class=\"hljs-keyword\">case</span> SELECT:\n        <span class=\"hljs-keyword\">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) {\n          executeWithResultHandler(sqlSession, args);\n          result = <span class=\"hljs-keyword\">null</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (method.returnsMany()) {\n          result = executeForMany(sqlSession, args);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (method.returnsMap()) {\n          result = executeForMap(sqlSession, args);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (method.returnsCursor()) {\n          result = executeForCursor(sqlSession, args);\n        } <span class=\"hljs-keyword\">else</span> {\n          Object param = method.convertArgsToSqlCommandParam(args);\n          result = sqlSession.selectOne(command.getName(), param);\n          <span class=\"hljs-keyword\">if</span> (method.returnsOptional()\n              &amp;&amp; (result == <span class=\"hljs-keyword\">null</span> || !method.getReturnType().equals(result.getClass()))) {\n            result = Optional.ofNullable(result);\n          }\n        }\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> FLUSH:\n        result = sqlSession.flushStatements();\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">default</span>:\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BindingException(<span class=\"hljs-string\">\"Unknown execution method for: \"</span> + command.getName());\n    }\n    <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-keyword\">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BindingException(<span class=\"hljs-string\">\"Mapper method '\"</span> + command.getName()\n          + <span class=\"hljs-string\">\" attempted to return null from a method with a primitive return type (\"</span> + method.getReturnType() + <span class=\"hljs-string\">\").\"</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> result;\n  }\n</code></pre>\n<p>以select查询为例，真正执行sql的是sqlSession.selectList方法</p>\n<pre><code class=\"language-java\">  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;E&gt; <span class=\"hljs-function\">List&lt;E&gt; <span class=\"hljs-title\">selectList</span><span class=\"hljs-params\">(String statement, Object parameter, RowBounds rowBounds)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      <span class=\"hljs-keyword\">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n      <span class=\"hljs-keyword\">throw</span> ExceptionFactory.wrapException(<span class=\"hljs-string\">\"Error querying database.  Cause: \"</span> + e, e);\n    } <span class=\"hljs-keyword\">finally</span> {\n      ErrorContext.instance().reset();\n    }\n  }\n\n\n    <span class=\"hljs-keyword\">private</span> &lt;E&gt; <span class=\"hljs-function\">List&lt;E&gt; <span class=\"hljs-title\">queryFromDatabase</span><span class=\"hljs-params\">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n    List&lt;E&gt; list;\n    localCache.putObject(key, EXECUTION_PLACEHOLDER);\n    <span class=\"hljs-keyword\">try</span> {\n      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n    } <span class=\"hljs-keyword\">finally</span> {\n      localCache.removeObject(key);\n    }\n    localCache.putObject(key, list);\n    <span class=\"hljs-keyword\">if</span> (ms.getStatementType() == StatementType.CALLABLE) {\n      localOutputParameterCache.putObject(key, parameter);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n</code></pre>\n<p>真正核心的是doQuery方法，其实也是对于jdbc的连接做了一次二次封装。</p>\n<pre><code class=\"language-java\"> <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;E&gt; <span class=\"hljs-function\">List&lt;E&gt; <span class=\"hljs-title\">doQuery</span><span class=\"hljs-params\">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span>\n      <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n    Statement stmt = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">try</span> {\n      flushStatements();\n      Configuration configuration = ms.getConfiguration();\n      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameterObject, rowBounds, resultHandler, boundSql);\n      <span class=\"hljs-comment\">//获取Statementhandle对象---&gt;对jdbc的statement的封装</span>\n      Connection connection = getConnection(ms.getStatementLog());\n      <span class=\"hljs-comment\">//获取连接</span>\n      stmt = handler.prepare(connection, transaction.getTimeout());\n      handler.parameterize(stmt);\n      <span class=\"hljs-comment\">//执行 statement.executeQuery(sql);，resultHandler 是对结果集的封装，这倆步都在handler.query()里进行处理。</span>\n      <span class=\"hljs-keyword\">return</span> handler.query(stmt, resultHandler);\n    } <span class=\"hljs-keyword\">finally</span> {\n      closeStatement(stmt);\n    }\n  }\n\n   <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;E&gt; <span class=\"hljs-function\">List&lt;E&gt; <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(Statement statement, ResultHandler resultHandler)</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n    String sql = boundSql.getSql();\n    <span class=\"hljs-comment\">//执行 statement.executeQuery(sql);</span>\n    statement.execute(sql); \n    <span class=\"hljs-comment\">//这里是在处理结果集，对结果集的封装</span>\n    <span class=\"hljs-keyword\">return</span> resultSetHandler.handleResultSets(statement);\n  }\n</code></pre>\n<p>总结：</p>\n<p>mybatis的实际操作过程就是jdbc的连接过程，只不过中间用到了代理模式，对mybatis的接口文件进行一个代理，解析sql语句，执行响应的jdbc流程，中间对statement，resultSet等进行了封装。</p>\n",
  "link": "/zh-cn/docs/5.框架/mybatis/2.源码解读.html",
  "meta": {}
}