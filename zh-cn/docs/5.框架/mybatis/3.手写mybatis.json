{
  "filename": "3.手写mybatis.md",
  "__html": "<h2 id=\"mybatis%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E7%B1%BB\">Mybatis中的关键类 <a class=\"header-anchor\" href=\"#mybatis%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E7%B1%BB\">#</a></h2>\n<ul>\n<li>入口: SqlSessionFactoryBuild().build().openSqlSession().getMapper(BlogMapper.class);</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hbatis.v2.session;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SqlSessionFactoryBuild</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> Configuration configuration;\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSessionFactoryBuild <span class=\"hljs-title\">build</span><span class=\"hljs-params\">()</span> </span>{\n    configuration=<span class=\"hljs-keyword\">new</span> Configuration();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DefaultSqlSession <span class=\"hljs-title\">openSqlSession</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultSqlSession(configuration);\n  }\n}\n\n</code></pre>\n<ul>\n<li>定义DefaultSqlSession</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hbatis.v2.session;\n\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.executor.Executor;\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.mapper.BlogMapper;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefaultSqlSession</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> Configuration configuration;\n\n  <span class=\"hljs-keyword\">private</span> Executor executor;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DefaultSqlSession</span><span class=\"hljs-params\">(Configuration configuration)</span> </span>{\n\n    <span class=\"hljs-keyword\">this</span>.configuration = configuration;\n    <span class=\"hljs-keyword\">this</span>.executor=configuration.newExecutor();\n\n  }\n  <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">getMapper</span><span class=\"hljs-params\">(Class clazz)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> configuration.getMapper(clazz,<span class=\"hljs-keyword\">this</span>);\n  }\n\n}\n</code></pre>\n<ul>\n<li>配置config，这个扫描指定路径，加载XML文件，这里用key--value的properties来代替处理。</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hbatis.v2.session;\n\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.binding.MapperRegistry;\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.executor.Executor;\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.executor.SimpleExecutor;\n\n<span class=\"hljs-keyword\">import</span> java.io.File;\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Configuration</span> </span>{\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ResourceBundle sqlMappings; <span class=\"hljs-comment\">// SQL映射关系配置，使用注解时不用重复配置</span>\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ResourceBundle properties; <span class=\"hljs-comment\">// 全局配置</span>\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> MapperRegistry MAPPER_REGISTRY = <span class=\"hljs-keyword\">new</span> MapperRegistry(); <span class=\"hljs-comment\">// 维护接口与工厂类关系</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Map&lt;String, String&gt; mappedStatements = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n  <span class=\"hljs-keyword\">private</span> List&lt;Class&lt;?&gt;&gt; mapperList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(); <span class=\"hljs-comment\">// 所有Mapper接口</span>\n  <span class=\"hljs-keyword\">private</span> List&lt;String&gt; classPaths = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(); <span class=\"hljs-comment\">// 类所有文件</span>\n\n  <span class=\"hljs-keyword\">static</span> {\n    sqlMappings=ResourceBundle.getBundle(<span class=\"hljs-string\">\"sql\"</span>);\n    properties=ResourceBundle.getBundle(<span class=\"hljs-string\">\"mybatis\"</span>);\n\n  }\n\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Configuration</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-comment\">// 1.解析sql.properties</span>\n    <span class=\"hljs-keyword\">for</span> (String key:sqlMappings.keySet()) {\n      Class mapper=<span class=\"hljs-keyword\">null</span>;\n      Class pojo=<span class=\"hljs-keyword\">null</span>;\n      String statement= sqlMappings.getString(key).split(<span class=\"hljs-string\">\"--\"</span>)[<span class=\"hljs-number\">0</span>];\n      String pojoStr = sqlMappings.getString(key).split(<span class=\"hljs-string\">\"--\"</span>)[<span class=\"hljs-number\">1</span>];\n\n      <span class=\"hljs-keyword\">try</span> {\n\n        Class.forName(key.substring(<span class=\"hljs-number\">0</span>, key.lastIndexOf(<span class=\"hljs-string\">\".\"</span>)));\n        pojo=Class.forName(pojoStr);\n\n      }<span class=\"hljs-keyword\">catch</span> (Exception e){\n        e.printStackTrace();\n      }\n\n      MAPPER_REGISTRY.addMapper(mapper,pojo);\n      mappedStatements.put(key,statement);\n\n    }\n    String mapperPath = properties.getString(<span class=\"hljs-string\">\"mapper.path\"</span>);\n    scanPackage(mapperPath);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">scanPackage</span><span class=\"hljs-params\">(String mapperPath)</span> </span>{\n    String classPath = <span class=\"hljs-keyword\">this</span>.getClass().getResource(<span class=\"hljs-string\">\"/\"</span>).getPath();\n    mapperPath = mapperPath.replace(<span class=\"hljs-string\">\".\"</span>, File.separator);\n    String mainPath = classPath + mapperPath;\n    doPath(<span class=\"hljs-keyword\">new</span> File(mainPath));\n    <span class=\"hljs-keyword\">for</span> (String className : classPaths) {\n      className = className.replace(classPath.replace(<span class=\"hljs-string\">\"/\"</span>,<span class=\"hljs-string\">\"\\\\\"</span>).replaceFirst(<span class=\"hljs-string\">\"\\\\\\\\\"</span>,<span class=\"hljs-string\">\"\"</span>),<span class=\"hljs-string\">\"\"</span>).replace(<span class=\"hljs-string\">\"\\\\\"</span>,<span class=\"hljs-string\">\".\"</span>).replace(<span class=\"hljs-string\">\".class\"</span>,<span class=\"hljs-string\">\"\"</span>);\n      Class&lt;?&gt; clazz = <span class=\"hljs-keyword\">null</span>;\n      <span class=\"hljs-keyword\">try</span> {\n        clazz = Class.forName(className);\n      } <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {\n        e.printStackTrace();\n      }\n      <span class=\"hljs-keyword\">if</span>(clazz.isInterface()){\n        mapperList.add(clazz);\n      }\n\n    }\n\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPath</span><span class=\"hljs-params\">(File file)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(file.isDirectory()){\n      File[] files = file.listFiles();\n      <span class=\"hljs-keyword\">for</span> (File f1:files) {\n        doPath(f1);\n      }\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(file.getName().endsWith(<span class=\"hljs-string\">\".class\"</span>)){\n        classPaths.add(file.getPath());\n      }\n    }\n  }\n\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title\">newExecutor</span><span class=\"hljs-params\">()</span> </span>{\n    Executor executor=<span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-comment\">//    if(properties.getString(\"cache.enabled\").equals(\"true\")){</span>\n\n    <span class=\"hljs-comment\">//    }else{</span>\n    executor=<span class=\"hljs-keyword\">new</span> SimpleExecutor();\n    <span class=\"hljs-comment\">//    }</span>\n    <span class=\"hljs-keyword\">return</span> executor;\n  }\n\n\n  <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">getMapper</span><span class=\"hljs-params\">(Class clazz, DefaultSqlSession sqlSession)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  }\n\n}\n\n</code></pre>\n<ul>\n<li>所有的代理类存储的器，Map的形式</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.hbatis.v2.binding;\n\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.session.DefaultSqlSession;\n\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MapperRegistry</span> </span>{\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;Class&lt;?&gt;,MapperProxyFactory&gt; knownMappers =<span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n\n\n  <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addMapper</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz,Class pojo)</span></span>{\n    knownMappers.put(clazz,<span class=\"hljs-keyword\">new</span> MapperProxyFactory());\n  }\n\n  <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">getMapper</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz, DefaultSqlSession sqlSession)</span></span>{\n    MapperProxyFactory mapperProxyFactory = knownMappers.get(clazz);\n    <span class=\"hljs-keyword\">return</span> (T)mapperProxyFactory.newInstance(sqlSession);\n  }\n\n}\n\n</code></pre>\n<ul>\n<li>测试类</li>\n</ul>\n<pre><code class=\"language-java\">\n<span class=\"hljs-keyword\">package</span> com.hbatis.v2;\n\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.mapper.Blog;\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.mapper.BlogMapper;\n<span class=\"hljs-keyword\">import</span> com.hbatis.v2.session.SqlSessionFactoryBuild;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestHbatis</span> </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    BlogMapper mapper = <span class=\"hljs-keyword\">new</span> SqlSessionFactoryBuild().build().openSqlSession().getMapper(BlogMapper<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n    Blog blog = mapper.selectBlogById(<span class=\"hljs-number\">1</span>);\n    System.out.println(blog);\n  }\n\n}\n</code></pre>\n<p>github地址：<a href=\"https://github.com/alfredhua/test/tree/master/Hbatis\">https://github.com/alfredhua/test/tree/master/Hbatis</a></p>\n",
  "link": "/zh-cn/docs/5.框架/mybatis/3.手写mybatis.html",
  "meta": {}
}