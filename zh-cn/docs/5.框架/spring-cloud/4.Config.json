{
  "filename": "4.Config.md",
  "__html": "<h3 id=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE\">为什么要统一管理微服务配置 <a class=\"header-anchor\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE\">#</a></h3>\n<p>对于Spring Boot应用，我们可以将配置内容写入<code>application.yml</code>，设置多个profile，也可以用多个<code>application-{profile}.properties</code>文件配置，并在启动时指定<code>spring.profiles.active={profile}</code>来加载不同环境下的配置。</p>\n<p>在Spring Cloud微服务架构中，这种方式未必适用，微服务架构对配置管理有着更高的要求，如：</p>\n<ul>\n<li>集中管理：成百上千（可能没这么多）个微服务需要集中管理配置，否则维护困难、容易出错；</li>\n<li>运行期动态调整：某些参数需要在应用运行时动态调整（如连接池大小、熔断阈值等），并且调整时不停止服务；</li>\n<li>自动更新配置：微服务能够在配置发生变化是自动更新配置。</li>\n</ul>\n<p>以上这些要求，传统方式是无法实现的，所以有必要借助一个通用的配置管理机制，通常使用配置服务器来管理配置。</p>\n<p>Spring Cloud Config分为Config Server和Config Client两部分，为分布式系统外部化配置提供了支持。 Spring Cloud Config非常适合Spring应用程序，也能与其他编程语言编写的应用组合使用。</p>\n<p>微服务在启动时，通过Config Client请求Config Server以获取配置内容，同时会缓存这些内容。</p>\n<p>POSTMAN或CURL等工具直接来访问到我们的配置内容了。访问配置信息的URL与配置文件的映射关系如下：</p>\n<ul>\n<li>/{application}/{profile}[/{label}]</li>\n<li>/{application}-{profile}.yml</li>\n<li>/{label}/{application}-{profile}.yml</li>\n<li>/{application}-{profile}.properties</li>\n<li>/{label}/{application}-{profile}.properties</li>\n</ul>\n<p>上面的url会映射<code>{application}-{profile}.properties</code>对应的配置文件，其中<code>{label}</code>对应Git上不同的分支，默认为master。我们可以尝试构造不同的url来访问不同的配置内容，比如，要访问master分支，config-client应用的dev环境，就可以访问这个</p>\n<p>访问路径：<a href=\"http://localhost:4040/config-client/dev/master\">http://localhost:4040/config-client/dev/master</a></p>\n<p>访问路径：</p>\n<pre><code>- config-client  ---&gt; label \n- dev\n- master\n</code></pre>\n<p>引入jar包：</p>\n<pre><code class=\"language-java\">compile group: <span class=\"hljs-string\">'org.springframework.cloud'</span>, name: <span class=\"hljs-string\">'spring-cloud-config-server'</span>, version: <span class=\"hljs-string\">'2.2.3.RELEASE'</span>\n</code></pre>\n<p>配置启动类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.server;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.config.server.EnableConfigServer;\n\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-meta\">@EnableDiscoveryClient</span>\n<span class=\"hljs-meta\">@EnableConfigServer</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConfigServerApplication</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{\n\n        SpringApplication.run(ConfigServerApplication<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\n    }\n}\n\n\n</code></pre>\n<p>配置文件：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">4040</span>\n\n<span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">application:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config-server</span>\n  <span class=\"hljs-attr\">cloud:</span>\n    <span class=\"hljs-attr\">config:</span>\n      <span class=\"hljs-attr\">server:</span>\n         <span class=\"hljs-attr\">git:</span>\n           <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">https://github.com/alfredhua/spring-cloud-config-repository.git</span>\n\n</code></pre>\n<p>配置config-client</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.server;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-meta\">@EnableDiscoveryClient</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConfigClientApplication</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{\n\n        SpringApplication.run(ConfigClientApplication<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\n    }\n}\n\n<span class=\"hljs-keyword\">package</span> com.server;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;\n<span class=\"hljs-keyword\">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;\n\n<span class=\"hljs-meta\">@RefreshScope</span>\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestController</span> </span>{\n\n    <span class=\"hljs-meta\">@Value</span>(<span class=\"hljs-string\">\"${info.from}\"</span>)\n    <span class=\"hljs-keyword\">private</span> String from;\n\n    <span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/from\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">from</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.from;\n    }\n}\n\n</code></pre>\n<p><a href=\"http://spring.application.name\">spring.application.name</a>：对应配置文件规则中的{application}部分\nspring.cloud.config.profile：对应配置文件规则中的{profile}部分\nspring.cloud.config.label：对应配置文件规则中的{label}部分\nspring.cloud.config.uri：配置中心config-server的地址</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">application:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config-client</span>\n  <span class=\"hljs-attr\">cloud:</span>\n    <span class=\"hljs-attr\">config:</span>\n      <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:4040/</span>\n      <span class=\"hljs-attr\">profile:</span> <span class=\"hljs-string\">dev</span>\n      <span class=\"hljs-attr\">label:</span> <span class=\"hljs-string\">master</span>\n    <span class=\"hljs-attr\">discovery:</span>\n      <span class=\"hljs-attr\">service-id:</span> <span class=\"hljs-string\">config-server</span> \n<span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">2001</span>\n</code></pre>\n<p>配置刷新</p>\n<ul>\n<li>重新启动config-clinet，访问一次<code>http://localhost:2001/from</code>，可以看到当前的配置值</li>\n<li>修改Git仓库<code>config-client/config-client-dev.yml</code>文件中<code>from</code>的值</li>\n<li>再次访问一次<code>http://localhost:2001/from</code>，可以看到配置值没有改变</li>\n<li>通过POST请求发送到<code>http://localhost:2001/refresh</code>，我们可以看到返回内容如下，代表<code>from</code>参数的配置内容被更新了</li>\n</ul>\n",
  "link": "/zh-cn/docs/5.框架/spring-cloud/4.Config.html",
  "meta": {}
}