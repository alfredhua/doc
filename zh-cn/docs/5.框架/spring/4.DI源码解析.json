{
  "filename": "4.DI源码解析.md",
  "__html": "<h1 id=\"di%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\">DI源码解析 <a class=\"header-anchor\" href=\"#di%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\">#</a></h1>\n<p>依赖注入发生的时间\n当 Spring IOC 容器完成了 Bean 定义资源的定位、载入和解析注册以后，IOC 容器中已经管理类 Bean 定义的相关数据，但是此时 IOC 容器还没有对所管理的 Bean 进行依赖注入，依赖注入在以下两种情况 发生:\n1)、用户第一次调用 getBean()方法时，IOC 容器触发依赖注入。\n2)、当用户在配置文件中将<bean>元素配置了 lazy-init=false 属性，即让容器在解析注册 Bean 定义 时进行预实例化，触发依赖注入。\nBeanFactory 接口定义了 Spring IOC 容器的基本功能规范，是 Spring IOC 容器所应遵守的最底层和 最基本的编程规范。BeanFactory 接口中定义了几个 getBean()方法，就是用户向 IOC 容器索取管理的 Bean 的方法，我们通过分析其子类的具体实现，理解 Spring IOC 容器在用户索取 Bean 时如何完成依 赖注入。</p>\n<h2 id=\"%E5%AF%BB%E6%89%BE%E8%8E%B7%E5%8F%96-bean-%E7%9A%84%E5%85%A5%E5%8F%A3\">寻找获取 Bean 的入口 <a class=\"header-anchor\" href=\"#%E5%AF%BB%E6%89%BE%E8%8E%B7%E5%8F%96-bean-%E7%9A%84%E5%85%A5%E5%8F%A3\">#</a></h2>\n<pre><code class=\"language-java\">\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getBean</span><span class=\"hljs-params\">(String name)</span> <span class=\"hljs-keyword\">throws</span> BeansException </span>{\n\t\t<span class=\"hljs-keyword\">return</span> doGetBean(name, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">false</span>);\n\t}\n\n<span class=\"hljs-comment\">//真正实现向 IOC 容器获取 Bean 的功能，也是触发依赖注入功能的地方</span>\n<span class=\"hljs-keyword\">protected</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">doGetBean</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String name, @Nullable <span class=\"hljs-keyword\">final</span> Class&lt;T&gt; requiredType,\n\t\t\t@Nullable <span class=\"hljs-keyword\">final</span> Object[] args, <span class=\"hljs-keyword\">boolean</span> typeCheckOnly)</span> <span class=\"hljs-keyword\">throws</span> BeansException </span>{\n\n\t\t<span class=\"hljs-comment\">//根据指定的名称获取被管理 Bean 的名称，剥离指定名称中对容器的相关依赖 </span>\n\t\t<span class=\"hljs-comment\">//如果指定的是别名，将别名转换为规范的 Bean 名称</span>\n\t\t<span class=\"hljs-keyword\">final</span> String beanName = transformedBeanName(name);\n\t\tObject bean;\n\n\t\t<span class=\"hljs-comment\">// Eagerly check singleton cache for manually registered singletons.</span>\n\t\t<span class=\"hljs-comment\">//先从缓存中取是否已经有被创建过的单态类型的 Bean </span>\n\t\t<span class=\"hljs-comment\">//对于单例模式的 Bean 整个 IOC 容器中只创建一次，不需要重复创建</span>\n\t\tObject sharedInstance = getSingleton(beanName);\n\t\t<span class=\"hljs-comment\">//IOC 容器创建单例模式 Bean 实例对象</span>\n\t\t<span class=\"hljs-keyword\">if</span> (sharedInstance != <span class=\"hljs-keyword\">null</span> &amp;&amp; args == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (logger.isTraceEnabled()) {\n\t\t\t\t<span class=\"hljs-comment\">//如果指定名称的 Bean 在容器中已有单例模式的 Bean 被创建 </span>\n\t\t\t\t<span class=\"hljs-comment\">//直接返回已经创建的 Bean</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (isSingletonCurrentlyInCreation(beanName)) {\n\t\t\t\t\tlogger.trace(<span class=\"hljs-string\">\"Returning eagerly cached instance of singleton bean '\"</span> + beanName +\n\t\t\t\t\t\t\t<span class=\"hljs-string\">\"' that is not fully initialized yet - a consequence of a circular reference\"</span>);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\tlogger.trace(<span class=\"hljs-string\">\"Returning cached instance of singleton bean '\"</span> + beanName + <span class=\"hljs-string\">\"'\"</span>);\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-comment\">//获取给定 Bean 的实例对象，主要是完成 FactoryBean 的相关处理 </span>\n\t\t\t<span class=\"hljs-comment\">//注意:BeanFactory 是管理容器中 Bean 的工厂，</span>\n\t\t\t<span class=\"hljs-comment\">//而 FactoryBean 是创建创建对象的工厂 Bean，两者之间有区别</span>\n\t\t\tbean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class=\"hljs-keyword\">null</span>);\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-comment\">// Fail if we're already creating this bean instance:</span>\n\t\t\t<span class=\"hljs-comment\">// We're assumably within a circular reference.</span>\n\t\t\t<span class=\"hljs-comment\">//缓存没有正在创建的单例模式 Bean </span>\n\t\t\t<span class=\"hljs-comment\">//缓存中已经有已经创建的原型模式 Bean </span>\n\t\t\t<span class=\"hljs-comment\">//但是由于循环引用的问题导致实例化对象失败</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> (isPrototypeCurrentlyInCreation(beanName)) {\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCurrentlyInCreationException(beanName);\n\t\t\t}\n\n\t\t\t<span class=\"hljs-comment\">// Check if bean definition exists in this factory.</span>\n\t\t\t<span class=\"hljs-comment\">//对 IOC 容器中是否存在指定名称的 BeanDefinition 进行检查，首先检查是否 </span>\n\t\t\t<span class=\"hljs-comment\">//能在当前的 BeanFactory 中获取的所需要的 Bean，如果不能则委托当前容器 </span>\n\t\t\t<span class=\"hljs-comment\">//的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找</span>\n\t\t\tBeanFactory parentBeanFactory = getParentBeanFactory();\n\t\t\t<span class=\"hljs-keyword\">if</span> (parentBeanFactory != <span class=\"hljs-keyword\">null</span> &amp;&amp; !containsBeanDefinition(beanName)) {\n\t\t\t\t<span class=\"hljs-comment\">// Not found -&gt; check parent.</span>\n\t\t\t\tString nameToLookup = originalBeanName(name);\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (parentBeanFactory <span class=\"hljs-keyword\">instanceof</span> AbstractBeanFactory) {\n\t\t\t\t\t<span class=\"hljs-keyword\">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n\t\t\t\t\t\t\tnameToLookup, requiredType, args, typeCheckOnly);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (args != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t<span class=\"hljs-comment\">// Delegation to parent with explicit args.</span>\n\t\t\t\t\t<span class=\"hljs-keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (requiredType != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t<span class=\"hljs-comment\">// No args -&gt; delegate to standard getBean method.</span>\n\t\t\t\t\t<span class=\"hljs-keyword\">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\t<span class=\"hljs-keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t<span class=\"hljs-keyword\">if</span> (!typeCheckOnly) {\n\t\t\t\tmarkBeanAsCreated(beanName);\n\t\t\t}\n\n\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t<span class=\"hljs-keyword\">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n\t\t\t\tcheckMergedBeanDefinition(mbd, beanName, args);\n\n\t\t\t\t<span class=\"hljs-comment\">// Guarantee initialization of beans that the current bean depends on.</span>\n\t\t\t\tString[] dependsOn = mbd.getDependsOn();\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (dependsOn != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t<span class=\"hljs-keyword\">for</span> (String dep : dependsOn) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (isDependent(beanName, dep)) {\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"Circular depends-on relationship between '\"</span> + beanName + <span class=\"hljs-string\">\"' and '\"</span> + dep + <span class=\"hljs-string\">\"'\"</span>);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tregisterDependentBean(dep, beanName);\n\t\t\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\t\t\tgetBean(dep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<span class=\"hljs-keyword\">catch</span> (NoSuchBeanDefinitionException ex) {\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"'\"</span> + beanName + <span class=\"hljs-string\">\"' depends on missing bean '\"</span> + dep + <span class=\"hljs-string\">\"'\"</span>, ex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t<span class=\"hljs-comment\">// Create bean instance.</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (mbd.isSingleton()) {\n\t\t\t\t\tsharedInstance = getSingleton(beanName, () -&gt; {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span> createBean(beanName, mbd, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<span class=\"hljs-keyword\">catch</span> (BeansException ex) {\n\t\t\t\t\t\t\t<span class=\"hljs-comment\">// Explicitly remove instance from singleton cache: It might have been put there</span>\n\t\t\t\t\t\t\t<span class=\"hljs-comment\">// eagerly by the creation process, to allow for circular reference resolution.</span>\n\t\t\t\t\t\t\t<span class=\"hljs-comment\">// Also remove any beans that received a temporary reference to the bean.</span>\n\t\t\t\t\t\t\tdestroySingleton(beanName);\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> ex;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n\t\t\t\t}\n\n\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mbd.isPrototype()) {\n\t\t\t\t\t<span class=\"hljs-comment\">// It's a prototype -&gt; create a new instance.</span>\n\t\t\t\t\tObject prototypeInstance = <span class=\"hljs-keyword\">null</span>;\n\t\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\t\tbeforePrototypeCreation(beanName);\n\t\t\t\t\t\tprototypeInstance = createBean(beanName, mbd, args);\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">finally</span> {\n\t\t\t\t\t\tafterPrototypeCreation(beanName);\n\t\t\t\t\t}\n\t\t\t\t\tbean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n\t\t\t\t}\n\n\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\tString scopeName = mbd.getScope();\n\t\t\t\t\t<span class=\"hljs-keyword\">final</span> Scope scope = <span class=\"hljs-keyword\">this</span>.scopes.get(scopeName);\n\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (scope == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"No Scope registered for scope name '\"</span> + scopeName + <span class=\"hljs-string\">\"'\"</span>);\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\t\tObject scopedInstance = scope.get(beanName, () -&gt; {\n\t\t\t\t\t\t\tbeforePrototypeCreation(beanName);\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span> createBean(beanName, mbd, args);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">finally</span> {\n\t\t\t\t\t\t\t\tafterPrototypeCreation(beanName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">catch</span> (IllegalStateException ex) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(beanName,\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"Scope '\"</span> + scopeName + <span class=\"hljs-string\">\"' is not active for the current thread; consider \"</span> +\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"defining a scoped proxy for this bean if you intend to refer to it from a singleton\"</span>,\n\t\t\t\t\t\t\t\tex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">catch</span> (BeansException ex) {\n\t\t\t\tcleanupAfterBeanCreationFailure(beanName);\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> ex;\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Check if required type matches the type of the actual bean instance.</span>\n\t\t<span class=\"hljs-keyword\">if</span> (requiredType != <span class=\"hljs-keyword\">null</span> &amp;&amp; !requiredType.isInstance(bean)) {\n\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\tT convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (convertedBean == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">return</span> convertedBean;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">catch</span> (TypeMismatchException ex) {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(<span class=\"hljs-string\">\"Failed to convert bean '\"</span> + name + <span class=\"hljs-string\">\"' to required type '\"</span> +\n\t\t\t\t\t\t\tClassUtils.getQualifiedName(requiredType) + <span class=\"hljs-string\">\"'\"</span>, ex);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">return</span> (T) bean;\n\t}\n\n</code></pre>\n<h2 id=\"%E5%BC%80%E5%A7%8B%E5%AE%9E%E4%BE%8B%E5%8C%96\">开始实例化 <a class=\"header-anchor\" href=\"#%E5%BC%80%E5%A7%8B%E5%AE%9E%E4%BE%8B%E5%8C%96\">#</a></h2>\n<pre><code class=\"language-java\">\n<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title\">createBean</span><span class=\"hljs-params\">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span>\n\t\t\t<span class=\"hljs-keyword\">throws</span> BeanCreationException </span>{\n\n\t\t<span class=\"hljs-keyword\">if</span> (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(<span class=\"hljs-string\">\"Creating instance of bean '\"</span> + beanName + <span class=\"hljs-string\">\"'\"</span>);\n\t\t}\n\t\tRootBeanDefinition mbdToUse = mbd;\n\n\t\t<span class=\"hljs-comment\">// Make sure bean class is actually resolved at this point, and</span>\n\t\t<span class=\"hljs-comment\">// clone the bean definition in case of a dynamically resolved Class</span>\n\t\t<span class=\"hljs-comment\">// which cannot be stored in the shared merged bean definition.</span>\n\t\t<span class=\"hljs-comment\">//判断需要创建的 Bean 是否可以实例化，即是否可以通过当前的类加载器加载</span>\n\t\tClass&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);\n\t\t<span class=\"hljs-keyword\">if</span> (resolvedClass != <span class=\"hljs-keyword\">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class=\"hljs-keyword\">null</span>) {\n\t\t\tmbdToUse = <span class=\"hljs-keyword\">new</span> RootBeanDefinition(mbd);\n\t\t\tmbdToUse.setBeanClass(resolvedClass);\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Prepare method overrides.</span>\n\t\t<span class=\"hljs-comment\">//校验和准备 Bean 中的方法覆盖</span>\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\tmbdToUse.prepareMethodOverrides();\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (BeanDefinitionValidationException ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),\n\t\t\t\t\tbeanName, <span class=\"hljs-string\">\"Validation of method overrides failed\"</span>, ex);\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t<span class=\"hljs-comment\">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>\n\t\t\t<span class=\"hljs-comment\">//如果 Bean 配置了初始化前和初始化后的处理器，则试图返回一个需要创建 Bean 的代理对象</span>\n\t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);\n\t\t\t<span class=\"hljs-keyword\">if</span> (bean != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t<span class=\"hljs-keyword\">return</span> bean;\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,\n\t\t\t\t\t<span class=\"hljs-string\">\"BeanPostProcessor before instantiation of bean failed\"</span>, ex);\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);\n\t\t\t<span class=\"hljs-keyword\">if</span> (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(<span class=\"hljs-string\">\"Finished creating instance of bean '\"</span> + beanName + <span class=\"hljs-string\">\"'\"</span>);\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">return</span> beanInstance;\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) {\n\t\t\t<span class=\"hljs-comment\">// A previously detected exception with proper bean creation context already,</span>\n\t\t\t<span class=\"hljs-comment\">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span>\n\t\t\t<span class=\"hljs-keyword\">throw</span> ex;\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\tmbdToUse.getResourceDescription(), beanName, <span class=\"hljs-string\">\"Unexpected exception during bean creation\"</span>, ex);\n\t\t}\n\t}\n\n\t<span class=\"hljs-comment\">//真正创建 Bean 的方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title\">doCreateBean</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String beanName, <span class=\"hljs-keyword\">final</span> RootBeanDefinition mbd, <span class=\"hljs-keyword\">final</span> @Nullable Object[] args)</span>\n\t\t\t<span class=\"hljs-keyword\">throws</span> BeanCreationException </span>{\n\n\t\t<span class=\"hljs-comment\">// Instantiate the bean.</span>\n\t\tBeanWrapper instanceWrapper = <span class=\"hljs-keyword\">null</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (mbd.isSingleton()) {\n\t\t\tinstanceWrapper = <span class=\"hljs-keyword\">this</span>.factoryBeanInstanceCache.remove(beanName);\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (instanceWrapper == <span class=\"hljs-keyword\">null</span>) {\n\t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n\t\t}\n\t\t<span class=\"hljs-keyword\">final</span> Object bean = instanceWrapper.getWrappedInstance();\n\t\tClass&lt;?&gt; beanType = instanceWrapper.getWrappedClass();\n\t\t<span class=\"hljs-keyword\">if</span> (beanType != NullBean<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>) </span>{\n\t\t\tmbd.resolvedTargetType = beanType;\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Allow post-processors to modify the merged bean definition.</span>\n\t\t<span class=\"hljs-keyword\">synchronized</span> (mbd.postProcessingLock) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (!mbd.postProcessed) {\n\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t\t\t<span class=\"hljs-string\">\"Post-processing of merged bean definition failed\"</span>, ex);\n\t\t\t\t}\n\t\t\t\tmbd.postProcessed = <span class=\"hljs-keyword\">true</span>;\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Eagerly cache singletons to be able to resolve circular references</span>\n\t\t<span class=\"hljs-comment\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>\n\t\t<span class=\"hljs-comment\">//向容器中缓存单例模式的 Bean 对象，以防循环引用</span>\n\t\t<span class=\"hljs-keyword\">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class=\"hljs-keyword\">this</span>.allowCircularReferences &amp;&amp;\n\t\t\t\tisSingletonCurrentlyInCreation(beanName));\n\t\t<span class=\"hljs-keyword\">if</span> (earlySingletonExposure) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(<span class=\"hljs-string\">\"Eagerly caching bean '\"</span> + beanName +\n\t\t\t\t\t\t<span class=\"hljs-string\">\"' to allow for resolving potential circular references\"</span>);\n\t\t\t}\n\t\t\t<span class=\"hljs-comment\">//这里是一个匿名内部类，为了防止循环引用，尽早持有对象的引用</span>\n\t\t\taddSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Initialize the bean instance.</span>\n\t\t<span class=\"hljs-comment\">//Bean 对象的初始化，依赖注入在此触发</span>\n\t\t<span class=\"hljs-comment\">//这个 exposedObject 在初始化完成之后返回作为依赖注入完成后的 Bean</span>\n\t\tObject exposedObject = bean;\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t<span class=\"hljs-comment\">//将 Bean 实例对象封装，并且 Bean 定义中配置的属性值赋值给实例对象</span>\n\t\t\tpopulateBean(beanName, mbd, instanceWrapper);\n\t\t\t<span class=\"hljs-comment\">//初始化 Bean 对象</span>\n\t\t\texposedObject = initializeBean(beanName, exposedObject, mbd);\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (ex <span class=\"hljs-keyword\">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) {\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> (BeanCreationException) ex;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"hljs-string\">\"Initialization of bean failed\"</span>, ex);\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> (earlySingletonExposure) {\n\t\t\t<span class=\"hljs-comment\">//获取指定名称的已注册的单例模式 Bean 对象</span>\n\t\t\tObject earlySingletonReference = getSingleton(beanName, <span class=\"hljs-keyword\">false</span>);\n\t\t\t<span class=\"hljs-keyword\">if</span> (earlySingletonReference != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t<span class=\"hljs-comment\">//根据名称获取的已注册的 Bean 和正在实例化的 Bean 是同一个</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (exposedObject == bean) {\n\t\t\t\t\texposedObject = earlySingletonReference;\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-comment\">//当前 Bean 依赖其他 Bean，并且当发生循环引用时不允许新创建实例对象</span>\n\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) {\n\t\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);\n\t\t\t\t\tSet&lt;String&gt; actualDependentBeans = <span class=\"hljs-keyword\">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);\n\t\t\t\t\t<span class=\"hljs-keyword\">for</span> (String dependentBean : dependentBeans) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n\t\t\t\t\t\t\tactualDependentBeans.add(dependentBean);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (!actualDependentBeans.isEmpty()) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCurrentlyInCreationException(beanName,\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"Bean with name '\"</span> + beanName + <span class=\"hljs-string\">\"' has been injected into other beans [\"</span> +\n\t\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"] in its raw version as part of a circular reference, but has eventually been \"</span> +\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"wrapped. This means that said other beans do not use the final version of the \"</span> +\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"bean. This is often the result of over-eager type matching - consider using \"</span> +\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\"</span>);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Register bean as disposable.</span>\n\t\t<span class=\"hljs-comment\">//注册完成依赖注入的 Bean</span>\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (BeanDefinitionValidationException ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"hljs-string\">\"Invalid destruction signature\"</span>, ex);\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">return</span> exposedObject;\n\t}\n\n\n</code></pre>\n<p>通过上面的源码注释，我们看到具体的依赖注入实现其实就在以下两个方法中:</p>\n<ol>\n<li>createBeanInstance()方法，生成 Bean 所包含的 java 对象实例。</li>\n<li>populateBean()方法，对 Bean 属性的依赖注入进行处理。 下面继续分析这两个方法的代码实现。</li>\n</ol>\n<h2 id=\"%E9%80%89%E6%8B%A9-bean-%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%AD%96%E7%95%A5\">选择 Bean 实例化策略 <a class=\"header-anchor\" href=\"#%E9%80%89%E6%8B%A9-bean-%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%AD%96%E7%95%A5\">#</a></h2>\n<p>在 createBeanInstance()方法中，根据指定的初始化策略，使用简单工厂、工厂方法或者容器的自动装 配特性生成 Java 实例对象，创建对象的源码如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//创建 Bean 的实例对象</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> BeanWrapper <span class=\"hljs-title\">createBeanInstance</span><span class=\"hljs-params\">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span> </span>{\n\t\t<span class=\"hljs-comment\">// Make sure bean class is actually resolved at this point.</span>\n\t\t<span class=\"hljs-comment\">//检查确认 Bean 是可实例化的</span>\n\t\tClass&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);\n\n\t\t<span class=\"hljs-comment\">//使用工厂方法对 Bean 进行实例化</span>\n\t\t<span class=\"hljs-keyword\">if</span> (beanClass != <span class=\"hljs-keyword\">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t<span class=\"hljs-string\">\"Bean class isn't public, and non-public access not allowed: \"</span> + beanClass.getName());\n\t\t}\n\n\t\tSupplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();\n\t\t<span class=\"hljs-keyword\">if</span> (instanceSupplier != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\n\t\t\t<span class=\"hljs-keyword\">return</span> obtainFromSupplier(instanceSupplier, beanName);\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> (mbd.getFactoryMethodName() != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t<span class=\"hljs-comment\">//调用工厂方法实例化</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Shortcut when re-creating the same bean...</span>\n\t\t<span class=\"hljs-comment\">//使用容器的自动装配方法进行实例化</span>\n\t\t<span class=\"hljs-keyword\">boolean</span> resolved = <span class=\"hljs-keyword\">false</span>;\n\t\t<span class=\"hljs-keyword\">boolean</span> autowireNecessary = <span class=\"hljs-keyword\">false</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (args == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t<span class=\"hljs-keyword\">synchronized</span> (mbd.constructorArgumentLock) {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\tresolved = <span class=\"hljs-keyword\">true</span>;\n\t\t\t\t\tautowireNecessary = mbd.constructorArgumentsResolved;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (resolved) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (autowireNecessary) {\n\t\t\t\t<span class=\"hljs-comment\">//配置了自动装配属性，使用容器的自动装配实例化 </span>\n\t\t\t\t<span class=\"hljs-comment\">//容器的自动装配是根据参数类型匹配 Bean 的构造方法</span>\n\t\t\t\t<span class=\"hljs-keyword\">return</span> autowireConstructor(beanName, mbd, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">null</span>);\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t<span class=\"hljs-comment\">//使用默认的无参构造方法实例化</span>\n\t\t\t\t<span class=\"hljs-keyword\">return</span> instantiateBean(beanName, mbd);\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Candidate constructors for autowiring?</span>\n\t\t<span class=\"hljs-comment\">//使用 Bean 的构造方法进行实例化</span>\n\t\tConstructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);\n\t\t<span class=\"hljs-keyword\">if</span> (ctors != <span class=\"hljs-keyword\">null</span> || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||\n\t\t\t\tmbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) {\n\t\t\t<span class=\"hljs-comment\">//使用容器的自动装配特性，调用匹配的构造方法实例化</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> autowireConstructor(beanName, mbd, ctors, args);\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Preferred constructors for default construction?</span>\n\t\tctors = mbd.getPreferredConstructors();\n\t\t<span class=\"hljs-keyword\">if</span> (ctors != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t<span class=\"hljs-keyword\">return</span> autowireConstructor(beanName, mbd, ctors, <span class=\"hljs-keyword\">null</span>);\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// No special handling: simply use no-arg constructor.</span>\n\t\t<span class=\"hljs-comment\">//使用默认的无参构造方法实例化</span>\n\t\t<span class=\"hljs-keyword\">return</span> instantiateBean(beanName, mbd);\n\t}\n<span class=\"hljs-comment\">//使用默认的无参构造方法实例化 Bean 对象</span>\n\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> BeanWrapper <span class=\"hljs-title\">instantiateBean</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String beanName, <span class=\"hljs-keyword\">final</span> RootBeanDefinition mbd)</span> </span>{\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\tObject beanInstance;\n\t\t\t<span class=\"hljs-keyword\">final</span> BeanFactory parent = <span class=\"hljs-keyword\">this</span>;\n\t\t\t<span class=\"hljs-comment\">//获取系统的安全管理接口，JDK 标准的安全管理 API</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> (System.getSecurityManager() != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t<span class=\"hljs-comment\">//这里是一个匿名内置类，根据实例化策略创建实例对象</span>\n\t\t\t\tbeanInstance = AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt;\n\t\t\t\t\t\tgetInstantiationStrategy().instantiate(mbd, beanName, parent),\n\t\t\t\t\t\tgetAccessControlContext());\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\tbeanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);\n\t\t\t}\n\t\t\tBeanWrapper bw = <span class=\"hljs-keyword\">new</span> BeanWrapperImpl(beanInstance);\n\t\t\tinitBeanWrapper(bw);\n\t\t\t<span class=\"hljs-keyword\">return</span> bw;\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"hljs-string\">\"Instantiation of bean failed\"</span>, ex);\n\t\t}\n\t}\n</code></pre>\n<p>经过对上面的代码分析，我们可以看出，对使用工厂方法和自动装配特性的 Bean 的实例化相当比较清 楚，调用相应的工厂方法或者参数匹配的构造方法即可完成实例化对象的工作，但是对于我们最常使用 的默认无参构造方法就需要使用相应的初始化策略(JDK 的反射机制或者 CGLib)来进行初始化了，在方 法 getInstantiationStrategy().instantiate()中就具体实现类使用初始策略实例化对象。</p>\n<h2 id=\"%E6%89%A7%E8%A1%8C-bean-%E5%AE%9E%E4%BE%8B%E5%8C%96\">执行 Bean 实例化 <a class=\"header-anchor\" href=\"#%E6%89%A7%E8%A1%8C-bean-%E5%AE%9E%E4%BE%8B%E5%8C%96\">#</a></h2>\n<p>在使用默认的无参构造方法创建 Bean 的实例化对象时，方法 getInstantiationStrategy().instantiate() 调用了 SimpleInstantiationStrategy 类中的实例化 Bean 的方法，其源码如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//使用初始化策略实例化 Bean 对象</span>\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">instantiate</span><span class=\"hljs-params\">(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner)</span> </span>{\n\t\t<span class=\"hljs-comment\">// Don't override the class with CGLIB if no overrides.</span>\n\t\t<span class=\"hljs-comment\">//如果 Bean 定义中没有方法覆盖，则就不需要 CGLib 父类类的方法</span>\n\t\t<span class=\"hljs-keyword\">if</span> (!bd.hasMethodOverrides()) {\n\t\t\tConstructor&lt;?&gt; constructorToUse;\n\t\t\t<span class=\"hljs-keyword\">synchronized</span> (bd.constructorArgumentLock) {\n\t\t\t\t<span class=\"hljs-comment\">//获取对象的构造方法或工厂方法</span>\n\t\t\t\tconstructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (constructorToUse == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t<span class=\"hljs-comment\">//使用 JDK 的反射机制，判断要实例化的 Bean 是否是接口</span>\n\t\t\t\t\t<span class=\"hljs-keyword\">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();\n\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (clazz.isInterface()) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanInstantiationException(clazz, <span class=\"hljs-string\">\"Specified class is an interface\"</span>);\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (System.getSecurityManager() != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t\t\tconstructorToUse = AccessController.doPrivileged(\n\t\t\t\t\t\t\t\t\t(PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;) clazz::getDeclaredConstructor);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\t\t\tconstructorToUse = clazz.getDeclaredConstructor();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbd.resolvedConstructorOrFactoryMethod = constructorToUse;\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanInstantiationException(clazz, <span class=\"hljs-string\">\"No default constructor found\"</span>, ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">return</span> BeanUtils.instantiateClass(constructorToUse);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-comment\">// Must generate CGLIB subclass.</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> instantiateWithMethodInjection(bd, beanName, owner);\n\t\t}\n\t}\n\n</code></pre>\n<p>通过上面的代码分析，我们看到了如果 Bean 有方法被覆盖了，则使用 JDK 的反射机制进行实例化，否 则，使用 CGLib 进行实例化。\ninstantiateWithMethodInjection() 方 法 调 用 SimpleInstantiationStrategy 的 子 类 CGLibSubclassingInstantiationStrategy 使用 CGLib 来进行初始化，其源码如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">instantiateClass</span><span class=\"hljs-params\">(Constructor&lt;T&gt; ctor, Object... args)</span> <span class=\"hljs-keyword\">throws</span> BeanInstantiationException </span>{\n\t\tAssert.notNull(ctor, <span class=\"hljs-string\">\"Constructor must not be null\"</span>);\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\tReflectionUtils.makeAccessible(ctor);\n\t\t\t<span class=\"hljs-keyword\">return</span> (KotlinDetector.isKotlinReflectPresent() &amp;&amp; KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?\n\t\t\t\t\tKotlinDelegate.instantiateClass(ctor, args) : ctor.newInstance(args));\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (InstantiationException ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanInstantiationException(ctor, <span class=\"hljs-string\">\"Is it an abstract class?\"</span>, ex);\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (IllegalAccessException ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanInstantiationException(ctor, <span class=\"hljs-string\">\"Is the constructor accessible?\"</span>, ex);\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (IllegalArgumentException ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanInstantiationException(ctor, <span class=\"hljs-string\">\"Illegal arguments for constructor\"</span>, ex);\n\t\t}\n\t\t<span class=\"hljs-keyword\">catch</span> (InvocationTargetException ex) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanInstantiationException(ctor, <span class=\"hljs-string\">\"Constructor threw exception\"</span>, ex.getTargetException());\n\t\t}\n\t}\n\n</code></pre>\n<p>CGLib 是一个常用的字节码生成器的类库，它提供了一系列 API 实现 Java 字节码的生成和转换功能。 我们在学习 JDK 的动态代理时都知道，JDK 的动态代理只能针对接口，如果一个类没有实现任何接口， 要对其进行动态代理只能使用 CGLib。</p>\n<h2 id=\"%E5%87%86%E5%A4%87%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\">准备依赖注入 <a class=\"header-anchor\" href=\"#%E5%87%86%E5%A4%87%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\">#</a></h2>\n<p>在前面的分析中我们已经了解到 Bean 的依赖注入主要分为两个步骤，首先调用 createBeanInstance() 方法生成 Bean 所包含的 Java 对象实例。然后，调用 populateBean()方法，对 Bean 属性的依赖注入 进行处理。</p>\n<pre><code class=\"language-java\">\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">populateBean</span><span class=\"hljs-params\">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>{\n\t\t<span class=\"hljs-keyword\">if</span> (bw == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (mbd.hasPropertyValues()) {\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"hljs-string\">\"Cannot apply property values to null instance\"</span>);\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t<span class=\"hljs-comment\">// Skip property population phase for null instance.</span>\n\t\t\t\t<span class=\"hljs-keyword\">return</span>;\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span>\n\t\t<span class=\"hljs-comment\">// state of the bean before properties are set. This can be used, for example,</span>\n\t\t<span class=\"hljs-comment\">// to support styles of field injection.</span>\n\t\t<span class=\"hljs-keyword\">boolean</span> continueWithPropertyPopulation = <span class=\"hljs-keyword\">true</span>;\n\n\t\t<span class=\"hljs-keyword\">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) {\n\t\t\t<span class=\"hljs-keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (bp <span class=\"hljs-keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) {\n\t\t\t\t\tInstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {\n\t\t\t\t\t\tcontinueWithPropertyPopulation = <span class=\"hljs-keyword\">false</span>;\n\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> (!continueWithPropertyPopulation) {\n\t\t\t<span class=\"hljs-keyword\">return</span>;\n\t\t}\n\n\t\tPropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class=\"hljs-keyword\">null</span>);\n\n\t\t<span class=\"hljs-keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {\n\t\t\tMutablePropertyValues newPvs = <span class=\"hljs-keyword\">new</span> MutablePropertyValues(pvs);\n\t\t\t<span class=\"hljs-comment\">// Add property values based on autowire by name if applicable.</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) {\n\t\t\t\tautowireByName(beanName, mbd, bw, newPvs);\n\t\t\t}\n\t\t\t<span class=\"hljs-comment\">// Add property values based on autowire by type if applicable.</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {\n\t\t\t\tautowireByType(beanName, mbd, bw, newPvs);\n\t\t\t}\n\t\t\tpvs = newPvs;\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();\n\t\t<span class=\"hljs-keyword\">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);\n\n\t\tPropertyDescriptor[] filteredPds = <span class=\"hljs-keyword\">null</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (hasInstAwareBpps) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (pvs == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\tpvs = mbd.getPropertyValues();\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (bp <span class=\"hljs-keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) {\n\t\t\t\t\tInstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n\t\t\t\t\tPropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);\n\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (pvsToUse == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (filteredPds == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t\t\tfilteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);\n\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (pvsToUse == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpvs = pvsToUse;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (needsDepCheck) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (filteredPds == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\tfilteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n\t\t\t}\n\t\t\tcheckDependencies(beanName, mbd, filteredPds, pvs);\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> (pvs != <span class=\"hljs-keyword\">null</span>) {\n\t\t\tapplyPropertyValues(beanName, mbd, bw, pvs);\n\t\t}\n\t}\n</code></pre>\n<p>分析上述代码，我们可以看出，对属性的注入过程分以下两种情况:</p>\n<ol>\n<li>属性值类型不需要强制转换时，不需要解析属性值，直接准备进行依赖注入。</li>\n<li>属性值需要进行类型强制转换时，如对其他对象的引用等，首先需要解析属性值，然后对解析后的 属性值进行依赖注入。对属性值的解析是在 BeanDefinitionValueResolver 类中的 resolveValueIfNecessary()方法中进行的， 对属性值的依赖注入是通过 bw.setPropertyValues()方法实现的，在分析属性值的依赖注入之前，我们 先分析一下对属性值的解析过程。</li>\n</ol>\n<h2 id=\"%E8%A7%A3%E6%9E%90%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E8%A7%84%E5%88%99\">解析属性注入规则 <a class=\"header-anchor\" href=\"#%E8%A7%A3%E6%9E%90%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E8%A7%84%E5%88%99\">#</a></h2>\n<p>当容器在对属性进行依赖注入时，如果发现属性值需要进行类型转换，如属性值是容器中另一个 Bean 实例对象的引用，则容器首先需要根据属性值解析出所引用的对象，然后才能将该引用对象注入到目标 实例对象的属性上去，对属性进行解析的由 resolveValueIfNecessary()方法实现</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Nullable</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">resolveValueIfNecessary</span><span class=\"hljs-params\">(Object argName, @Nullable Object value)</span> </span>{\n\t\t<span class=\"hljs-comment\">// We must check each value to see whether it requires a runtime reference</span>\n\t\t<span class=\"hljs-comment\">// to another bean to be resolved.</span>\n\t\t<span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> RuntimeBeanReference) {\n\t\t\tRuntimeBeanReference ref = (RuntimeBeanReference) value;\n\t\t\t<span class=\"hljs-keyword\">return</span> resolveReference(argName, ref);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> RuntimeBeanNameReference) {\n\t\t\tString refName = ((RuntimeBeanNameReference) value).getBeanName();\n\t\t\trefName = String.valueOf(doEvaluate(refName));\n\t\t\t<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.beanFactory.containsBean(refName)) {\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanDefinitionStoreException(\n\t\t\t\t\t\t<span class=\"hljs-string\">\"Invalid bean name '\"</span> + refName + <span class=\"hljs-string\">\"' in bean reference for \"</span> + argName);\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">return</span> refName;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> BeanDefinitionHolder) {\n\t\t\t<span class=\"hljs-comment\">// Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.</span>\n\t\t\tBeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value;\n\t\t\t<span class=\"hljs-keyword\">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> BeanDefinition) {\n\t\t\t<span class=\"hljs-comment\">// Resolve plain BeanDefinition, without contained name: use dummy name.</span>\n\t\t\tBeanDefinition bd = (BeanDefinition) value;\n\t\t\tString innerBeanName = <span class=\"hljs-string\">\"(inner bean)\"</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +\n\t\t\t\t\tObjectUtils.getIdentityHexString(bd);\n\t\t\t<span class=\"hljs-keyword\">return</span> resolveInnerBean(argName, innerBeanName, bd);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> ManagedArray) {\n\t\t\t<span class=\"hljs-comment\">// May need to resolve contained runtime references.</span>\n\t\t\tManagedArray array = (ManagedArray) value;\n\t\t\tClass&lt;?&gt; elementType = array.resolvedElementType;\n\t\t\t<span class=\"hljs-keyword\">if</span> (elementType == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\tString elementTypeName = array.getElementTypeName();\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (StringUtils.hasText(elementTypeName)) {\n\t\t\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\t\t\telementType = ClassUtils.forName(elementTypeName, <span class=\"hljs-keyword\">this</span>.beanFactory.getBeanClassLoader());\n\t\t\t\t\t\tarray.resolvedElementType = elementType;\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t\t\t\t<span class=\"hljs-comment\">// Improve the message by showing the context.</span>\n\t\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">this</span>.beanDefinition.getResourceDescription(), <span class=\"hljs-keyword\">this</span>.beanName,\n\t\t\t\t\t\t\t\t<span class=\"hljs-string\">\"Error resolving array type for \"</span> + argName, ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\telementType = Object<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span></span>;\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> ManagedList) {\n\t\t\t<span class=\"hljs-comment\">// May need to resolve contained runtime references.</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> ManagedSet) {\n\t\t\t<span class=\"hljs-comment\">// May need to resolve contained runtime references.</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> ManagedMap) {\n\t\t\t<span class=\"hljs-comment\">// May need to resolve contained runtime references.</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> ManagedProperties) {\n\t\t\tProperties original = (Properties) value;\n\t\t\tProperties copy = <span class=\"hljs-keyword\">new</span> Properties();\n\t\t\toriginal.forEach((propKey, propValue) -&gt; {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (propKey <span class=\"hljs-keyword\">instanceof</span> TypedStringValue) {\n\t\t\t\t\tpropKey = evaluate((TypedStringValue) propKey);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (propValue <span class=\"hljs-keyword\">instanceof</span> TypedStringValue) {\n\t\t\t\t\tpropValue = evaluate((TypedStringValue) propValue);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (propKey == <span class=\"hljs-keyword\">null</span> || propValue == <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\t\t\t<span class=\"hljs-keyword\">this</span>.beanDefinition.getResourceDescription(), <span class=\"hljs-keyword\">this</span>.beanName,\n\t\t\t\t\t\t\t<span class=\"hljs-string\">\"Error converting Properties key/value pair for \"</span> + argName + <span class=\"hljs-string\">\": resolved to null\"</span>);\n\t\t\t\t}\n\t\t\t\tcopy.put(propKey, propValue);\n\t\t\t});\n\t\t\t<span class=\"hljs-keyword\">return</span> copy;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> TypedStringValue) {\n\t\t\t<span class=\"hljs-comment\">// Convert value to target type here.</span>\n\t\t\tTypedStringValue typedStringValue = (TypedStringValue) value;\n\t\t\tObject valueObject = evaluate(typedStringValue);\n\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\tClass&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (resolvedTargetType != <span class=\"hljs-keyword\">null</span>) {\n\t\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\t<span class=\"hljs-keyword\">return</span> valueObject;\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\t\t\t\t<span class=\"hljs-comment\">// Improve the message by showing the context.</span>\n\t\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BeanCreationException(\n\t\t\t\t\t\t<span class=\"hljs-keyword\">this</span>.beanDefinition.getResourceDescription(), <span class=\"hljs-keyword\">this</span>.beanName,\n\t\t\t\t\t\t<span class=\"hljs-string\">\"Error converting typed String value for \"</span> + argName, ex);\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> NullBean) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> evaluate(value);\n\t\t}\n\t}\n</code></pre>\n<p>通过上面的代码分析，我们明白了 Spring 是如何将引用类型，内部类以及集合类型等属性进行解析的， 属性值解析完成后就可以进行依赖注入了，依赖注入的过程就是 Bean 对象实例设置到它所依赖的 Bean 对象属性上去。而真正的依赖注入是通过 bw.setPropertyValues()方法实现的，该方法也使用了委托模 式，在 BeanWrapper 接口中至少定义了方法声明，依赖注入的具体实现交由其实现类 BeanWrapperImpl 来完成，下面我们就分析依 BeanWrapperImpl 中赖注入相关的源码。</p>\n<h2 id=\"%E6%B3%A8%E5%85%A5%E8%B5%8B%E5%80%BC\">注入赋值 <a class=\"header-anchor\" href=\"#%E6%B3%A8%E5%85%A5%E8%B5%8B%E5%80%BC\">#</a></h2>\n<p>BeanWrapperImpl 类主要是对容器中完成初始化的 Bean 实例对象进行属性的依赖注入，即把 Bean 对象设置到它所依赖的另一个 Bean 的属性中去。然而，BeanWrapperImpl 中的注入方法实际上由 AbstractNestablePropertyAccessor 来实现的</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPropertyValue</span><span class=\"hljs-params\">(PropertyTokenHolder tokens, PropertyValue pv)</span> <span class=\"hljs-keyword\">throws</span> BeansException </span>{\n\t\t<span class=\"hljs-keyword\">if</span> (tokens.keys != <span class=\"hljs-keyword\">null</span>) {\n\t\t\tprocessKeyedProperty(tokens, pv);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\tprocessLocalProperty(tokens, pv);\n\t\t}\n\t}\n\t\n</code></pre>\n<p>Spring IOC 容器是如何将属性的值注入到 Bean 实 例对象中去的:</p>\n<ol>\n<li>对于集合类型的属性，将其属性值解析为目标类型的集合后直接赋值给属性。</li>\n<li>对于非集合类型的属性，大量使用了 JDK 的反射机制，通过属性的 getter()方法获取指定属性注入 以前的值，同时调用属性的 setter()方法为属性设置注入后的值。看到这里相信很多人都明白了 Spring 的 setter()注入原理。</li>\n</ol>\n",
  "link": "/zh-cn/docs/5.框架/spring/4.DI源码解析.html",
  "meta": {}
}