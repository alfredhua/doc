{
  "filename": "4.单线程模型.md",
  "__html": "<h1 id=\"%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B\">单线程模型 <a class=\"header-anchor\" href=\"#%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B\">#</a></h1>\n<h2 id=\"%E4%B8%BA%E5%95%A5redis%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B9%9F%E8%83%BD%E6%95%88%E7%8E%87%E8%BF%99%E4%B9%88%E9%AB%98%EF%BC%9F\">为啥redis单线程模型也能效率这么高？ <a class=\"header-anchor\" href=\"#%E4%B8%BA%E5%95%A5redis%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B9%9F%E8%83%BD%E6%95%88%E7%8E%87%E8%BF%99%E4%B9%88%E9%AB%98%EF%BC%9F\">#</a></h2>\n<ol>\n<li>纯内存操作</li>\n<li>核心是基于非阻塞的IO多路复用机制</li>\n<li>单线程反而避免了多线程的频繁上下文切换问题</li>\n</ol>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/9f8a445961454fa2a284276cfab76f93\" alt=\"image\"></p>\n<p>题外话：</p>\n<pre><code>我们现在要仔细的说一说I/O多路复用机制，因为这个说法实在是太通俗了，通俗到一般人都不懂是什么意思。博主打一个比方：小曲在S城开了一家快递店，负责同城快送服务。小曲因为资金限制，雇佣了一批快递员，然后小曲发现资金不够了，只够买一辆车送快递。\n</code></pre>\n<p>经营方式一：</p>\n<p>客户每送来一份快递，小曲就让一个快递员盯着，然后快递员开车去送快递。慢慢的小曲就发现了这种经营方式存在下述问题几十个快递员基本上时间都花在了抢车上了，大部分快递员都处在闲置状态，谁抢到了车，谁就能去送快递。随着快递的增多，快递员也越来越多，小曲发现快递店里越来越挤，没办法雇佣新的快递员了。快递员之间的协调很花时间。</p>\n<p>综合上述缺点，小曲痛定思痛，提出了下面的经营方式</p>\n<p>经营方式二：</p>\n<p>小曲只雇佣一个快递员。然后呢，客户送来的快递，小曲按送达地点标注好，然后依次放在一个地方。最后，那个快递员依次的去取快递，一次拿一个，然后开着车去送快递，送好了就回来拿下一个快递。</p>\n<p>对比\n上述两种经营方式对比，是不是明显觉得第二种，效率更高，更好呢。在上述比喻中:</p>\n<table>\n<thead>\n<tr>\n<th>比喻</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>每个快递员</td>\n<td>每个线程</td>\n</tr>\n<tr>\n<td>每个快递</td>\n<td>每个socket(I/O流)</td>\n</tr>\n<tr>\n<td>快递的送达地点</td>\n<td>socket的不同状态</td>\n</tr>\n<tr>\n<td>客户送快递请求</td>\n<td>来自客户端的请求</td>\n</tr>\n<tr>\n<td>小曲的经营方式</td>\n<td>服务端运行的代码</td>\n</tr>\n<tr>\n<td>一辆车</td>\n<td>CPU的核数</td>\n</tr>\n</tbody>\n</table>\n<p>于是我们有如下结论：</p>\n<ol>\n<li>经营方式一就是传统的并发模型，每个I/O流(快递)都有一个新的线程(快递员)管理。</li>\n<li>经营方式二就是I/O多路复用。只有单个线程(一个快递员)，通过跟踪每个I/O流的状态(每个快递的送达地点)，来管理多个I/O流</li>\n</ol>\n<p>redis优势：</p>\n<ol>\n<li>\n<p>Redis支持服务器端的数据操作：Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在Memcached里，你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。在Redis中，这些复杂的操作通常和一般的GET/SET一样高效。所以，如果需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。</p>\n</li>\n<li>\n<p>集群模式：memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是redis目前是原生支持cluster模式的，redis官方就是支持redis cluster集群模式的，比memcached来说要更好。</p>\n</li>\n</ol>\n",
  "link": "/zh-cn/docs/6.缓存/redis/4.单线程模型.html",
  "meta": {}
}