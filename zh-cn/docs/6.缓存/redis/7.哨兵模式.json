{
  "filename": "7.哨兵模式.md",
  "__html": "<h2 id=\"%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F\">哨兵模式 <a class=\"header-anchor\" href=\"#%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F\">#</a></h2>\n<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/f8c6d8463a3b46b496fb437192f517e9\" alt=\"image\"></p>\n<p>这里的哨兵有两个作用</p>\n<ul>\n<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li>\n<li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li>\n</ul>\n<p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p>用文字描述一下故障切换（failover）的过程。</p>\n<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。</p>\n<h2 id=\"%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB\">故障转移 <a class=\"header-anchor\" href=\"#%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB\">#</a></h2>\n<p>总结来说，故障转移分为三个步骤：</p>\n<ol>\n<li>\n<p>从下线的主服务的所有从服务里面挑选一个从服务，将其转成主服务</p>\n<p>sentinel状态数据结构中保存了主服务的所有从服务信息，领头sentinel按照如下的规则从从服务列表中挑选出新的主服务；\n删除列表中处于下线状态的从服务；删除最近5秒没有回复过领头sentinel info信息的从服务；\n删除与已下线的主服务断开连接时间超过 down-after-milliseconds*10毫秒的从服务，\n这样就能保留从的数据比较新（没有过早的与主断开连接）；\n领头sentinel从剩下的从列表中选择优先级高的，如果优先级一样，选择偏移量最大的（偏移量大说明复制的数据比较新），\n如果偏移量一样，选择运行id最小的从服务。</p>\n</li>\n<li>\n<p>已下线主服务的所有从服务改为复制新的主服务\n挑选出新的主服务之后，领头sentinel 向原主服务的从服务发送 slaveof 新主服务 的命令，复制新master。</p>\n</li>\n<li>\n<p>将已下线的主服务设置成新的主服务的从服务，当其恢复正常时，复制新的主服务，变成新的主服务的从服务\n同理，当已下线的服务重新上线时，sentinel会向其发送slaveof命令，让其成为新主的从。</p>\n</li>\n</ol>\n",
  "link": "/zh-cn/docs/6.缓存/redis/7.哨兵模式.html",
  "meta": {}
}