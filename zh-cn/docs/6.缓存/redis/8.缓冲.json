{
  "filename": "8.缓冲.md",
  "__html": "<h2 id=\"%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9\">缓存雪崩 <a class=\"header-anchor\" href=\"#%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/90427422aa67451bb3c72c79189e5edc\" alt=\"image\"></p>\n<p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p>\n<p>解决方案：</p>\n<p>缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线 程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。这里分享一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>\n<h2 id=\"%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F\">缓存穿透 <a class=\"header-anchor\" href=\"#%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F\">#</a></h2>\n<p><img src=\"http://java-run-blog.oss-cn-zhangjiakou.aliyuncs.com/file/30f8ecaa736b4649ae68522a1e124e87\" alt=\"image\"></p>\n<p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p>\n<p>解决：\n有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数 据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p>\n<p>布隆过滤器：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// import com.google.common.base.Charsets;</span>\n<span class=\"hljs-comment\">// import com.google.common.hash.BloomFilter;</span>\n<span class=\"hljs-comment\">// import com.google.common.hash.Funnels;</span>\n    <span class=\"hljs-meta\">@PostConstruct</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n\t\t<span class=\"hljs-comment\">//将数据从数据库导入到本地</span>\n\t\tallUsers = UserDao.getAllUser();\n\t\t<span class=\"hljs-keyword\">if</span>(allUsers == <span class=\"hljs-keyword\">null</span> || allUsers.size()==<span class=\"hljs-number\">0</span>){\n\t\t\t<span class=\"hljs-keyword\">return</span>;\n\t\t}\n\t\t<span class=\"hljs-comment\">//创建布隆过滤器(默认3%误差)</span>\n\t\tbf = BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8), allUsers.size());\n\t\t<span class=\"hljs-comment\">//将数据存入布隆过滤器</span>\n\t\t<span class=\"hljs-keyword\">for</span>(UserDto userDto : allUsers){\n\t\t\tbf.put(userDto.getUserName());\n\t\t}\n\t}\n\n</code></pre>\n<h2 id=\"%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF\">缓存击穿 <a class=\"header-anchor\" href=\"#%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF\">#</a></h2>\n<p>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。</p>\n<p>缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>\n<p>解决方案：</p>\n<ol>\n<li>使用互斥锁(mutex key)： 这种解决方案思路比较简单，就是只让一个线程构建缓存，其他线程等待构建缓存的线程执行完，重新从缓存获取数据就可以了（如下图）</li>\n</ol>\n<pre><code class=\"language-java\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(key)</span> </span>{\n      String value = redis.get(key);\n      <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-keyword\">null</span>) { \n\t\t  <span class=\"hljs-comment\">//代表缓存值过期</span>\n          <span class=\"hljs-comment\">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span>\n\t\t  <span class=\"hljs-keyword\">if</span> (redis.setnx(key_mutex, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">60</span>) == <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">//代表设置成功</span>\n               value = db.get(key);\n               redis.set(key, value, expire_secs);\n               redis.del(key_mutex);\n           } <span class=\"hljs-keyword\">else</span> {  <span class=\"hljs-comment\">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span>\n               sleep(<span class=\"hljs-number\">50</span>);\n               get(key);  <span class=\"hljs-comment\">//重试</span>\n          }\n      } <span class=\"hljs-keyword\">else</span> {\n              <span class=\"hljs-keyword\">return</span> value;      \n      }\n }\n</code></pre>\n<ol start=\"2\">\n<li>&quot;提前&quot;使用互斥锁(mutex key)：在value内部设置1个超时值(timeout1), timeout1比实际的memcache timeout(timeout2)小。当从cache读取到timeout1发现它已经过期时候，马上延长timeout1并重新设置到cache。然后再从数据库加载数据并设置到cache中。伪代码如下</li>\n</ol>\n<pre><code class=\"language-java\">v = memcache.get(key);  \n<span class=\"hljs-keyword\">if</span> (v == <span class=\"hljs-keyword\">null</span>) {  \n    <span class=\"hljs-keyword\">if</span> (memcache.add(key_mutex, <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>) == <span class=\"hljs-keyword\">true</span>) {  \n        value = db.get(key);  \n        memcache.set(key, value);  \n        memcache.delete(key_mutex);  \n    } <span class=\"hljs-keyword\">else</span> {  \n        sleep(<span class=\"hljs-number\">50</span>);  \n        retry();  \n    }  \n} <span class=\"hljs-keyword\">else</span> {  \n    <span class=\"hljs-keyword\">if</span> (v.timeout &lt;= now()) {  \n        <span class=\"hljs-keyword\">if</span> (memcache.add(key_mutex, <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>) == <span class=\"hljs-keyword\">true</span>) {  \n            <span class=\"hljs-comment\">// extend the timeout for other threads  </span>\n            v.timeout += <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>;  \n            memcache.set(key, v, KEY_TIMEOUT * <span class=\"hljs-number\">2</span>);  \n  \n            <span class=\"hljs-comment\">// load the latest value from db  </span>\n            v = db.get(key);  \n            v.timeout = KEY_TIMEOUT;  \n            memcache.set(key, value, KEY_TIMEOUT * <span class=\"hljs-number\">2</span>);  \n            memcache.delete(key_mutex);  \n        } <span class=\"hljs-keyword\">else</span> {  \n            sleep(<span class=\"hljs-number\">50</span>);  \n            retry();  \n        }  \n    }  \n} \n</code></pre>\n<ol start=\"3\">\n<li>\n<p>永不过期</p>\n</li>\n<li>\n<p>从redis上看，确实没有设置过期时间，这就保证了，不会出现热点key过期问题，也就是“物理”不过期。</p>\n</li>\n<li>\n<p>从功能上看，如果不过期，那不就成静态的了吗？所以我们把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建，也就是“逻辑”过期</p>\n</li>\n</ol>\n<p>从实战看，这种方法对于性能非常友好，唯一不足的就是构建缓存时候，其余线程(非构建缓存的线程)可能访问的是老数据，但是对于一般的互联网功能来说这个还是可以忍受。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">String <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String key)</span> </span>{  \n        V v = redis.get(key);  \n        String value = v.getValue();  \n        <span class=\"hljs-keyword\">long</span> timeout = v.getTimeout();  \n        <span class=\"hljs-keyword\">if</span> (v.timeout &lt;= System.currentTimeMillis()) {  \n            <span class=\"hljs-comment\">// 异步更新后台异常执行  </span>\n            threadPool.execute(<span class=\"hljs-keyword\">new</span> Runnable() {  \n                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{  \n                    String keyMutex = <span class=\"hljs-string\">\"mutex:\"</span> + key;  \n                    <span class=\"hljs-keyword\">if</span> (redis.setnx(keyMutex, <span class=\"hljs-string\">\"1\"</span>)) {  \n                        <span class=\"hljs-comment\">// 3 min timeout to avoid mutex holder crash  </span>\n                        redis.expire(keyMutex, <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">60</span>);  \n                        String dbValue = db.get(key);  \n                        redis.set(key, dbValue);  \n                        redis.delete(keyMutex);  \n                    }  \n                }  \n            });  \n        }  \n        <span class=\"hljs-keyword\">return</span> value;  \n}\n</code></pre>\n<ol start=\"4\">\n<li>资源保护</li>\n</ol>\n<p>采用netflix的hystrix，可以做资源的隔离保护主线程池，如果把这个应用到缓存的构建也未尝不可。</p>\n<p>四种解决方案：没有最佳只有最合适</p>\n<table>\n<thead>\n<tr>\n<th>解决方案</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>简单分布式互斥锁（mutex key）</td>\n<td>1. 思路简单<br>2. 保证一致性</td>\n<td>1. 代码复杂度增大<br>2. 存在死锁的风险<br>3. 存在线程池阻塞的风险</td>\n</tr>\n<tr>\n<td>“提前”使用互斥锁</td>\n<td>1. 保证一致性</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>不过期(本文)</td>\n<td>1. 异步构建缓存，不会阻塞线程池</td>\n<td>1. 不保证一致性。<br>2. 代码复杂度增大(每个value都要维护一个timekey)。<br>3. 占用一定的内存空间(每个value都要维护一个timekey)。</td>\n</tr>\n<tr>\n<td>资源隔离组件hystrix(本文)</td>\n<td>1. hystrix技术成熟，有效保证后端。<br>2. hystrix监控强大。</td>\n<td>1. 部分访问存在降级策略。</td>\n</tr>\n</tbody>\n</table>\n",
  "link": "/zh-cn/docs/6.缓存/redis/8.缓冲.html",
  "meta": {}
}