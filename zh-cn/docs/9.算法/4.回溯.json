{
  "filename": "4.回溯.md",
  "__html": "<h2 id=\"%E5%85%A8%E6%8E%92%E5%88%97\">全排列 <a class=\"header-anchor\" href=\"#%E5%85%A8%E6%8E%92%E5%88%97\">#</a></h2>\n<p>从n个不同元素中任取m（m≤n）个元素，按照一定的顺序排列起来，</p>\n<p>叫做从n个不同元素中取出m个元素的一个排列。当m=n时所有的排列情况叫全排列。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{ \n    <span class=\"hljs-keyword\">static</span> List&lt;LinkedList&lt;Integer&gt;&gt; res = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  List&lt;LinkedList&lt;Integer&gt;&gt; lookBack(Integer[] nums){\n        LinkedList&lt;Integer&gt; list=<span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();\n        backtrack(nums,list);\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrack</span><span class=\"hljs-params\">(Integer[] nums,LinkedList&lt;Integer&gt; list)</span></span>{\n        <span class=\"hljs-keyword\">if</span> (list.size() == nums.length) {\n            res.add(<span class=\"hljs-keyword\">new</span> LinkedList(list));\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n            <span class=\"hljs-keyword\">if</span> (list.contains(nums[i])){\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            <span class=\"hljs-keyword\">int</span> a= nums[i];\n            list.add(a);\n            backtrack(nums, list);\n            list.removeLast();\n        }\n    }\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/9.算法/4.回溯.html",
  "meta": {}
}