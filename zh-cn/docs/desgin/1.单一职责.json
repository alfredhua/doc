{
  "filename": "1.单一职责.md",
  "__html": "<p>单一职责(Simple Responsibility Pinciple，SRP)是指不要存在多于一个导致类变更的原因。</p>\n<p>假设我们有一个Class负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致另一个职责的功能发生故障。这样一来，这个Class存在两个导致类变更的原因。如何解决这个问题呢?我们就要给两个职责分别用两个Class来实现，进行解耦。后期需求变更维护互不影响。</p>\n<p>这样的设计，可以降低类的复杂度，提高类的可读性，提高系统的可维护性，降低变更引起的风险。总体来说就是一个Class/Interface/Method只负责一项职责。接下来，我们来看代码实例，还是用课程举例，我们的课程有直播课和录播课。直播课 不能快进和快退，录播可以可以任意的反复观看，功能职责不一样。还是先创建一个 Course 类:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Course</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">study</span><span class=\"hljs-params\">(String courseName)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">\"直播课\"</span>.equals(courseName)){  \n       System.out.println(courseName + <span class=\"hljs-string\">\"不能快进\"</span>);\n    }<span class=\"hljs-keyword\">else</span>{\n       System.out.println(courseName + <span class=\"hljs-string\">\"可以反复回看\"</span>);\n    } }\n}\n</code></pre>\n<p>从上面代码来看，Course 类承担了两种处理逻辑。假如，现在要对课程进行加密，那么 直播课和录播课的加密逻辑都不一样，必须要修改代码。而修改代码逻辑势必会相互影 响容易造成不可控的风险。我们对职责进行分离解耦，来看代码，分别创建两个类</p>\n<pre><code class=\"language-java\"> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LiveCourse</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">study</span><span class=\"hljs-params\">(String courseName)</span></span>{\n     System.out.println(courseName+<span class=\"hljs-string\">\"不能快进看\"</span>); \n    }\n}   \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReplayCourse</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">study</span><span class=\"hljs-params\">(String courseName)</span></span>{\n      System.out.println(courseName+<span class=\"hljs-string\">\"可以反复回\"</span>);\n     }\n}\n</code></pre>\n<p>业务继续发展，课程要做权限。没有付费的学员可以获取课程基本信息，已经付费的学 员可以获得视频流，即学习权限。那么对于控制课程层面上至少有两个职责。我们可以 把展示职责和管理职责分离开来，都实现同一个抽象依赖。</p>\n<p>设计一个顶层接口,创建 ICourse 接口:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ICourse</span> </span>{ <span class=\"hljs-comment\">//获得基本信息</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">getCourseName</span><span class=\"hljs-params\">()</span></span>; <span class=\"hljs-comment\">//获得视频流</span>\n    <span class=\"hljs-keyword\">byte</span>[] getCourseVideo();\n    <span class=\"hljs-comment\">//学习课程</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">studyCourse</span><span class=\"hljs-params\">()</span></span>; <span class=\"hljs-comment\">//退款</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">refundCourse</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<p>我们可以把这个接口拆成两个接口，创建一个接口 ICourseInfo 和 ICourseManager: ICourseInfo 接口:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ICourseInfo</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">getCourseName</span><span class=\"hljs-params\">()</span></span>; \n    <span class=\"hljs-keyword\">byte</span>[] getCourseVideo();\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ICourseManager</span> </span>{ \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">studyCourse</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">refundCourse</span><span class=\"hljs-params\">()</span></span>;\n}\n\n</code></pre>\n",
  "link": "/zh-cn/docs/desgin/1.单一职责.html",
  "meta": {
    "title": "单一职责-码农阿华",
    "keywords": "设计模式，单一职责，码农阿华",
    "description": "单一职责(Simple Responsibility Pinciple，SRP)是指不要存在多于一个导致类变更的原因。"
  }
}