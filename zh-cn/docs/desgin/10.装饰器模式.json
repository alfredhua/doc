{
  "filename": "10.装饰器模式.md",
  "__html": "<p>装饰器模式：</p>\n<p>装饰器的核心就是新接口继承原有的接口，对于原有的实现类，重新注入到新的实现类想</p>\n<p>如：public interface ISigninForThirdService  extends ISigninService</p>\n<p>装饰器模式是一种特殊的适配器模式：</p>\n<p>比较：</p>\n<table>\n<thead>\n<tr>\n<th>装饰器模式</th>\n<th>适配器模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是一种非常特别的适配器模式</td>\n<td>可以不保留层级关系</td>\n</tr>\n<tr>\n<td>装饰者和被装饰者都要实现同一个接口，主要目的是为了扩展，依旧保留OOP关系</td>\n<td>适配者和被适配者没有必然的层级联系，通常采用代理或者继承形式进行包装</td>\n</tr>\n<tr>\n<td>满足is-a的关系</td>\n<td>满足has-a</td>\n</tr>\n<tr>\n<td>注重的是覆盖、扩展</td>\n<td>注重兼容、转换</td>\n</tr>\n</tbody>\n</table>\n<pre><code>public interface ISigninService {\n     ResultMsg regist(String username, String password);\n\n    /**\n     * 登录的方法\n     * @param username\n     * @param password\n     * @return\n     */\n     ResultMsg login(String username, String password);\n}\npublic class Member {\n\n    private String username;\n    private String password;\n    private String mid;\n    private String info;\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getMid() {\n        return mid;\n    }\n\n    public void setMid(String mid) {\n        this.mid = mid;\n    }\n\n    public String getInfo() {\n        return info;\n    }\n\n    public void setInfo(String info) {\n        this.info = info;\n    }\n}\n\npublic class ResultMsg {\n\n    private int code;\n    private String msg;\n    private Object data;\n\n    public ResultMsg(int code, String msg, Object data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public void setCode(int code) {\n        this.code = code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public Object getData() {\n        return data;\n    }\n\n    public void setData(Object data) {\n        this.data = data;\n    }\n}\n\npublic class SigninService implements ISigninService {\n\n    public ResultMsg regist(String username,String password){\n        return  new ResultMsg(200,&quot;注册成功&quot;,new Member());\n    }\n\n\n    /**\n     * 登录的方法\n     * @param username\n     * @param password\n     * @return\n     */\n    public ResultMsg login(String username,String password){\n        return null;\n    }\n}\npublic interface ISigninForThirdService  extends ISigninService {\n\n    public ResultMsg loginForQQ(String openId);\n\n    public ResultMsg loginForWechat(String openId);\n\n    public ResultMsg loginForToken(String token);\n\n    public ResultMsg loginForTelphone(String telphone,String code);\n\n    public ResultMsg loginForRegist(String username,String password);\n}\n\npublic class SigninForThirdService implements ISigninForThirdService {\n\n    private ISigninService service;\n    public SigninForThirdService(ISigninService service){\n        this.service = service;\n    }\n\n\n    @Override\n    public ResultMsg regist(String username, String password) {\n        return service.regist(username,password);\n    }\n\n    @Override\n    public ResultMsg login(String username, String password) {\n        return service.login(username,password);\n    }\n\n\n    public ResultMsg loginForQQ(String openId){\n        return loginForRegist(openId,null);\n    }\n\n    public ResultMsg loginForWechat(String openId){\n        return null;\n    }\n\n    public ResultMsg loginForToken(String token){\n        //通过token拿到用户信息，然后再重新登陆了一次\n        return  null;\n    }\n\n    public ResultMsg loginForTelphone(String telphone,String code){\n\n        return null;\n    }\n\n    public ResultMsg loginForRegist(String username,String password){\n        this.regist(username,null);\n        return this.login(username,null);\n    }\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/desgin/10.装饰器模式.html",
  "meta": {}
}