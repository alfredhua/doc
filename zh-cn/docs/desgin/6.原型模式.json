{
  "filename": "6.原型模式.md",
  "__html": "<p>原型模式：\n我们从数据库获取数据到DTO，从DTO传递给VO，这个时候需要将DTO层的数据全部copy到VO中，这种模式就是一种原型模式。</p>\n<p>copy的方式是克隆。</p>\n<hr>\n<p>案例：spring中的  scope='prototype'是一个原型模式，每次创建的时候都是一个新的对象，这个对象会取到原有对象的所有的值。</p>\n<h4 id=\"%E6%B5%85%E5%85%8B%E9%9A%86%3A\">浅克隆: <a class=\"header-anchor\" href=\"#%E6%B5%85%E5%85%8B%E9%9A%86%3A\">#</a></h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Teacher</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Cloneable</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title\">clone</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> CloneNotSupportedException </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">super</span>.clone();\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Teacher</span><span class=\"hljs-params\">(String name, Student student, Date date)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.name = name;\n        <span class=\"hljs-keyword\">this</span>.student = student;\n        <span class=\"hljs-keyword\">this</span>.date = date;\n    }\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> Student student;\n    <span class=\"hljs-keyword\">private</span> Date date;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Student <span class=\"hljs-title\">getStudent</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> student;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setStudent</span><span class=\"hljs-params\">(Student student)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.student = student;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title\">getDate</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> date;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDate</span><span class=\"hljs-params\">(Date date)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.date = date;\n    }\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> CloneNotSupportedException </span>{\n\n       Student student=<span class=\"hljs-keyword\">new</span> Student(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"张三\"</span>);\n        Teacher teacher = <span class=\"hljs-keyword\">new</span> Teacher(<span class=\"hljs-string\">\"老师\"</span>,  student,<span class=\"hljs-keyword\">new</span> Date());\n\n        Teacher cloneTeacher =(Teacher) teacher.clone();\n        System.out.println(teacher.getStudent().getClass() == cloneTeacher.getStudent().getClass());\n        System.out.println(teacher+<span class=\"hljs-string\">\"||||||\"</span>+cloneTeacher);\n\n\n        System.out.println(<span class=\"hljs-string\">\"克隆后，比较克隆对象改变引用\"</span>);\n        System.out.println(teacher.getStudent()+<span class=\"hljs-string\">\"||||||\"</span>+ cloneTeacher.getStudent());\n<span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-comment\">//com.gpxy.clone.Teacher@2503dbd3||||||com.gpxy.clone.Teacher@4b67cf4d</span>\n<span class=\"hljs-comment\">//克隆后，比较克隆对象改变引用</span>\n<span class=\"hljs-comment\">//com.gpxy.clone.Student@7ea987ac||||||com.gpxy.clone.Student@7ea987ac</span>\n\n    }\n    \n</code></pre>\n<h4 id=\"%E6%B7%B1%E5%85%8B%E9%9A%86%EF%BC%9A\">深克隆： <a class=\"header-anchor\" href=\"#%E6%B7%B1%E5%85%8B%E9%9A%86%EF%BC%9A\">#</a></h4>\n<p>将所有的值都克隆，完全是新的一份，实现的方式也比较多。如：序列化，反射等。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeepTeacher</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Cloneable</span>,<span class=\"hljs-title\">Serializable</span></span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DeepTeacher <span class=\"hljs-title\">clone</span><span class=\"hljs-params\">()</span>  </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            ByteArrayOutputStream byteArrayOutputStream = <span class=\"hljs-keyword\">new</span> ByteArrayOutputStream();\n            ObjectOutputStream objectOutputStream = <span class=\"hljs-keyword\">new</span> ObjectOutputStream(byteArrayOutputStream);\n            objectOutputStream.writeObject(<span class=\"hljs-keyword\">this</span>);\n\n            ByteArrayInputStream byteArrayInputStream=<span class=\"hljs-keyword\">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n            ObjectInputStream objectInputStream=<span class=\"hljs-keyword\">new</span> ObjectInputStream(byteArrayInputStream);\n            DeepTeacher o = (DeepTeacher)objectInputStream.readObject();\n            <span class=\"hljs-keyword\">return</span> o;\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DeepTeacher</span><span class=\"hljs-params\">(String name, DeepStudent student, Date date)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.name = name;\n        <span class=\"hljs-keyword\">this</span>.student = student;\n        <span class=\"hljs-keyword\">this</span>.date = date;\n    }\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> DeepStudent student;\n    <span class=\"hljs-keyword\">private</span> Date date;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DeepStudent <span class=\"hljs-title\">getStudent</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> student;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setStudent</span><span class=\"hljs-params\">(DeepStudent student)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.student = student;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title\">getDate</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> date;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDate</span><span class=\"hljs-params\">(Date date)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.date = date;\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeepStudent</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Cloneable</span>, <span class=\"hljs-title\">Serializable</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Integer id;\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DeepStudent</span><span class=\"hljs-params\">(Integer id, String name)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.id = id;\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> id;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(Integer id)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.id = id;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n}\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{\n        DeepTeacher teacher=<span class=\"hljs-keyword\">new</span> DeepTeacher(<span class=\"hljs-string\">\"teacher1\"</span>, <span class=\"hljs-keyword\">new</span> DeepStudent(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"学生\"</span>),<span class=\"hljs-keyword\">new</span> Date());\n        DeepTeacher cloneDeepTeacher = teacher.clone();\n        System.out.println(teacher+<span class=\"hljs-string\">\"----\"</span>+cloneDeepTeacher);\n        System.out.println(teacher.getStudent()+<span class=\"hljs-string\">\"---\"</span>+cloneDeepTeacher.getStudent());\n        System.out.println(teacher==cloneDeepTeacher);\n    }\n<span class=\"hljs-comment\">//com.gpxy.clone.DeepTeacher@610455d6----com.gpxy.clone.DeepTeacher@27973e9b</span>\n<span class=\"hljs-comment\">//com.gpxy.clone.DeepStudent@63947c6b---com.gpxy.clone.DeepStudent@312b1dae</span>\n<span class=\"hljs-comment\">//false</span>\n\n</code></pre>\n<p>由此可以看出deepStudet的地址变了。所以深度克隆是完全一个新的。</p>\n",
  "link": "/zh-cn/docs/desgin/6.原型模式.html",
  "meta": {}
}