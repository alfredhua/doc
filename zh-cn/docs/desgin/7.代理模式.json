{
  "filename": "7.代理模式.md",
  "__html": "<p>静态代理:</p>\n<p>静态代理不需要接口，只是一个代理对象拿到了被代理对象的引用，有代理对象调用被代理对象而已。</p>\n<pre><code>public class Father {\n\n    private Son son;\n    \n    public Father(Son son) {\n        this.son=son;\n    }\n\n    public void findSonLove(){\n        System.out.println(&quot;代理前-----------&quot;);\n        son.findLove();\n        System.out.println(&quot;被代理后---------&quot;);\n    }\n}\n\n\npublic class Son {\n\n    public void findLove(){\n        System.out.println(&quot;son 被代理&quot;);\n    }\n}\n\npublic class StaticTest {\n\n    public static void main(String[] args){\n            new Father(new Son()).findSonLove();\n    }\n}\n\n\n</code></pre>\n<p>动态代理：JKD和CGLIB俩种方式</p>\n<p>JDK动态代理：</p>\n<pre><code>public interface  Person {\n    void findLove();\n    void eat();\n}\n\n\npublic class MeiPoProxy implements InvocationHandler {\n\n    private Person person;\n\n    public Object getInstance(Person person){\n        this.person=person;\n        Class&lt;? extends Person&gt; aClass = person.getClass();\n        return Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), aClass.getInterfaces(), this);\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(&quot;被代理前----------------&quot;);\n        method.invoke(this.person, args);\n        System.out.println(&quot;被代理后--------------&quot;);\n\n        return null;\n    }\n}\n\npublic class SomeBody implements Person {\n\n\n    @Override\n    public void findLove() {\n        System.out.println(&quot;some body 被代理&quot;);\n\n    }\n    @Override\n    public void eat() {\n\n    }\n}\n\n\npublic class JDKProxyTest {\n\n    public static void main(String[] args) {\n        try {\n            Person obj = (Person)new JDK58().getInstance(new XieMu());\n            System.out.println(obj.getClass());\n            obj.findJob();\n            //原理：\n            //1、拿到被代理对象的引用，并且获取到它的所有的接口，反射获取\n            //2、JDK Proxy类重新生成一个新的类、同时新的类要实现被代理类所有实现的所有的接口\n            //3、动态生成Java代码，把新加的业务逻辑方法由一定的逻辑代码去调用（在代码中体现）\n            //4、编译新生成的Java代码.class\n            //5、再重新加载到JVM中运行\n            //以上这个过程就叫字节码重组\n\n            //JDK中有个规范，只要要是$开头的一般都是自动生成的\n\n            //通过反编译工具可以查看源代码\n            byte [] bytes = ProxyGenerator.generateProxyClass(&quot;$Proxy0&quot;,new Class[]{Person.class});\n            FileOutputStream os = new FileOutputStream(&quot;E://$Proxy0.class&quot;);\n            os.write(bytes);\n            os.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n</code></pre>\n<p>CGLIB动态代理:</p>\n<pre><code>public class SomeBody implements Person {\n\n    @Override\n    public void findLove() {\n        System.out.println(&quot;some body 被代理&quot;);\n\n    }\n    @Override\n    public void eat() {\n\n    }\n}\n\n\n\npublic class CglibProxy implements MethodInterceptor {\n\n    public Object getInstance(Class clazz){\n        Enhancer enhancer=new Enhancer();\n        enhancer.setSuperclass(clazz);\n        enhancer.setCallback(this);\n        return enhancer.create();\n\n    }\n\n    @Override\n    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        System.out.println(&quot;被代理前------------&quot;);\n        methodProxy.invokeSuper(o, objects);\n        System.out.println(&quot;被代理后------------&quot;);\n        return null;\n    }\n\n}\n\npublic class CglibTest {\n\n    public static void main(String[] args){\n        CglibProxy cglibProxy=new CglibProxy();\n        Person instance =(Person) cglibProxy.getInstance(SomeBody.class);\n        instance.findLove();\n    }\n}\n\n\n</code></pre>\n<p>自己动手实现动态代理：\n动态代理之所以是动态的，是因为代理之前，也不知道代理的是什么，只有在代码运行时才知道，所以就需要动态的生成中间代理，然后进行代理。</p>\n<p>实现方式:</p>\n<ol>\n<li>动态生成源代码.java文件。</li>\n<li>JAVA文件输出到磁盘。</li>\n<li>把自己生成的java文件编辑成class文件。</li>\n<li>将编译的class文件加载到JVM中。</li>\n<li>返回的字节码重组成新的对象。</li>\n</ol>\n<pre><code>public class CustomerMeiPoProxy implements HuaIncationHandle {\n\n\n    private Person person;\n\n    public Object getInstance(Person person){\n        this.person=person;\n        Class&lt;? extends Person&gt; aClass = person.getClass();\n        return HuaProxy.newProxyInstance(new HuaClassLoader(), aClass.getInterfaces(), this);\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(&quot;被代理前-------------------&quot;);\n\n        method.invoke(person, args);\n        System.out.println(&quot;被代理后-------------------&quot;);\n        return null;\n    }\n}\n\n\npublic class HuaClassLoader  extends ClassLoader{\n\n    private File classPathFile;\n\n    public HuaClassLoader() {\n        String classPath = HuaClassLoader.class.getResource(&quot;&quot;).getPath();\n        this.classPathFile = new File(classPath);\n    }\n\n    @Override\n    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {\n        String className = HuaClassLoader.class.getPackage().getName() + &quot;.&quot; + name;\n\n        if (classPathFile != null){\n            File classFile = new File(classPathFile,name.replaceAll(&quot;\\\\.&quot;,&quot;/&quot;) + &quot;.class&quot;);\n            if (classFile.exists()){\n\n                FileInputStream inputStream = null;\n                ByteArrayOutputStream outputStream=null;\n\n\n                try {\n                    inputStream=new FileInputStream(classFile);\n                    outputStream=new ByteArrayOutputStream();\n                    byte [] buff = new byte[1024];\n                    int len;\n                    while((len=inputStream.read(buff))!=-1){\n                        outputStream.write(buff,0,len);\n                    }\n                    return  defineClass(className,outputStream.toByteArray(),0,outputStream.size());\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }else {\n\n            return null;\n        }\n        return null;\n    }\n}\n\npublic interface HuaIncationHandle {\n\n     Object invoke(Object proxy, Method method, Object[] args) throws Throwable;\n\n}\n\npublic class HuaProxy {\n\n\n    private static String ln=&quot;\\r\\n&quot;;\n\n    public static Object newProxyInstance(HuaClassLoader loader,Class&lt;?&gt;[] interfaces, HuaIncationHandle h){\n\n        //1.动态的生成java文件。\n        try {\n            String s = generaterStr(interfaces);\n\n            //2.输出到磁盘上，\n            String path = HuaProxy.class.getResource(&quot;&quot;).getPath();\n            System.out.println(path+&quot;------&quot;);\n            File file = new File(path + &quot;$Proxy0.java&quot;);\n\n            FileWriter fileWriter = new FileWriter(file);\n            fileWriter.write(s);\n            fileWriter.flush();\n            fileWriter.close();\n\n            //3.编译成class文件。\n            JavaCompiler systemJavaCompiler = ToolProvider.getSystemJavaCompiler();\n            StandardJavaFileManager standardFileManager = systemJavaCompiler.getStandardFileManager(null, null, null);\n\n            Iterable&lt;? extends JavaFileObject&gt; javaFileObjects = standardFileManager.getJavaFileObjects(file);\n            JavaCompiler.CompilationTask task = systemJavaCompiler.getTask(null,standardFileManager,null,null,null,javaFileObjects);\n            task.call();\n            standardFileManager.close();\n\n            //4.加载到JVM中。\n            Class&lt;?&gt; proxyClass = loader.findClass(&quot;$Proxy0&quot;);\n            Constructor c = proxyClass.getConstructor(HuaIncationHandle.class);\n            //5.返回字节码重组以后的新的代理对象\n            return c.newInstance(h);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private static String generaterStr(Class&lt;?&gt;[] interfaces) {\n        StringBuffer sb=new StringBuffer();\n\n        sb.append(&quot;package com.gpxy.proxy.custome;&quot;+ln);\n        sb.append(&quot;import com.gpxy.proxy.Person;&quot; + ln);\n        sb.append(&quot;import java.lang.reflect.Method;&quot; + ln);\n\n        sb.append(&quot;public class $Proxy0 implements &quot;+interfaces[0].getName()+&quot;{&quot;+ln );\n\n            sb.append(&quot; HuaIncationHandle  h; &quot;+ln);\n\n            sb.append(&quot; public $Proxy0 (HuaIncationHandle h){&quot;+ln);\n                    sb.append(&quot;this.h=h;&quot;+ln);\n            sb.append(&quot;}&quot;+ln);\n\n        for ( Method method :interfaces[0].getMethods()){\n                sb.append(&quot; public &quot;+method.getReturnType().getName()+&quot; &quot;+method.getName()+&quot;(){&quot; +ln);\n                                sb.append(&quot;try{&quot;+ln);\n                                     sb.append(&quot;Method m = &quot; + interfaces[0].getName() + &quot;.class.getMethod(\\&quot;&quot; + method.getName() + &quot;\\&quot;,new Class[]{});&quot; + ln);\n                                     sb.append(&quot;this.h.invoke(this,m,null);&quot; + ln);\n                                sb.append(&quot;}catch(Throwable e){&quot;+ln);\n                                     sb.append(&quot;e.printStackTrace();&quot; + ln);\n                                sb.append(&quot;}&quot;+ln);\n                sb.append(&quot;}&quot;+ln);\n             }\n        sb.append(&quot;}&quot;+ln);\n\n        return sb.toString();\n    }\n}\n\npublic class SomeBody implements Person {\n\n\n    @Override\n    public void findLove() {\n        System.out.println(&quot;some body 被代理&quot;);\n\n    }\n    @Override\n    public void eat() {\n\n    }\n}\n\npublic class CustomerProxyTest {\n    public static void main(String[] args){\n        CustomerMeiPoProxy customerMeiPoProxy=new CustomerMeiPoProxy();\n        Person instance =(Person) customerMeiPoProxy.getInstance(new SomeBody());\n        instance.findLove();\n    }\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/desgin/7.代理模式.html",
  "meta": {}
}