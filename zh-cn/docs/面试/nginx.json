{
  "filename": "nginx.md",
  "__html": "<h2 id=\"%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%8Cnginx%EF%BC%9F\">负载均衡的实现，nginx？ <a class=\"header-anchor\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%8Cnginx%EF%BC%9F\">#</a></h2>\n<ol>\n<li>轮询（默认）——每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</li>\n<li>weight ——指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</li>\n<li>ip_hash ——每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器。</li>\n<li>backup——其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</li>\n<li>down——表示当前的server暂时不参与负载</li>\n<li>fair（第三方）按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。</li>\n</ol>\n<h2 id=\"nginx%E5%92%8Ctomcat%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">nginx和tomcat的区别是什么？ <a class=\"header-anchor\" href=\"#nginx%E5%92%8Ctomcat%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">#</a></h2>\n<p>​\t\t虽然Tomcat也可以认为是HTTP服务器，内部集成了http服务器的相关功能，但通常它仍然会和Nginx配合在一起使用。nginx常用做静态内容服务和反向代理服务器，以及页面前端高并发服务器。严格的来说，Nginx 应该叫做「HTTP Server」；而 Tomcat 则是一个「Application Server」，或者更准确的来说，是一个「Servlet/JSP」应用的容器（Ruby/Python 等其他语言开发的应用也无法直接运行在 Tomcat 上），这种特性导致了它们在使用中有明确的分工职责。tomcat更多用来做做一个应用容器，让java web app跑在里面的东西。nginx大部分适用于静态资源文件的访问（图片，文件）</p>\n<h2 id=\"nginx%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84\">nginx是如何实现高并发的 <a class=\"header-anchor\" href=\"#nginx%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84\">#</a></h2>\n<p>一个主进程，多个工作进程，每个工作进程可以处理多个请求\n每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，worker才会来接手，这个request才会接着往下走。\n由于web server的工作性质决定了每个request的大部份生命都是在网络传输中，实际上花费在server机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即webserver刚好属于网络io密集型应用，不算是计算密集型。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%E4%BB%80%E4%B9%88%3F\">使用反向代理服务器的好处是什么? <a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%E4%BB%80%E4%B9%88%3F\">#</a></h2>\n<p>反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。</p>\n",
  "link": "/zh-cn/docs/面试/nginx.html",
  "meta": {}
}